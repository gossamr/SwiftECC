{"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"","anchor":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"type":"text","text":" "},{"text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms.","type":"text"}]},{"type":"heading","text":"Example","anchor":"Example","level":4},{"syntax":"swift","code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["Hi, there!","Hi, there!"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,","type":"text"},{"type":"text","text":" "},{"text":"Apple M1 chip is shown below - units are Megabytes per second.","type":"text"}],"type":"paragraph"},{"type":"table","rows":[[[{"inlineContent":[{"text":"Algorithm","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Encrypt","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"500 MByte\/Sec"}]}],[{"inlineContent":[{"type":"text","text":"425 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"AES-128\/GCM","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"2000 MByte\/Sec"}]}],[{"inlineContent":[{"type":"text","text":"1200 MByte\/Sec"}],"type":"paragraph"}]]],"header":"row","alignments":["right","right","right"]},{"level":4,"text":"Key Derivation","type":"heading","anchor":"Key-Derivation"},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"Four cases are considered:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ChaCha20\/Poly1305"}]}]},{"inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"type":"text","text":"\n"},{"text":"Encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 32 ..< 44","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-128\/GCM"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 28 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 16 ..< 28","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"AES-192\/GCM"}],"type":"strong"}]},{"inlineContent":[{"text":"KDF generates 36 bytes.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-256\/GCM","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 32 ..< 44","type":"text"}]}]}],"type":"unorderedList"}]}],"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SwiftECC"}],"title":"AEAD Encrypt and Decrypt"},"kind":"article","references":{"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","title":"SwiftECC"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","url":"\/documentation\/swiftecc\/signverify","title":"Sign and Verify","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","role":"article","kind":"article","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","type":"topic","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"type":"topic","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","abstract":[{"text":"Generating a shared secret","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"abstract":[{"text":"ECIES encryption and decryption","type":"text"}],"title":"Encrypt and Decrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","type":"topic","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/References":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","kind":"article","title":"References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"url":"\/documentation\/swiftecc\/performance","type":"topic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article","title":"Performance"}}}