{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt"},"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"metadata":{"modules":[{"name":"SwiftECC"}],"roleHeading":"Article","role":"article","title":"AEAD Encrypt and Decrypt"},"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"anchor":"Articles","title":"Articles","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"","type":"heading","level":2,"text":""},{"inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"type":"text","text":" "},{"type":"text","text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms."}],"type":"paragraph"},{"anchor":"Example","type":"heading","level":4,"text":"Example"},{"syntax":"swift","type":"codeListing","code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Hi, there!","Hi, there!"]},{"inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,","type":"text"},{"text":" ","type":"text"},{"text":"Apple M1 chip is shown below - units are Megabytes per second.","type":"text"}],"type":"paragraph"},{"alignments":["right","right","right"],"rows":[[[{"inlineContent":[{"text":"Algorithm","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Encrypt"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"500 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"425 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"AES-128\/GCM"}]}],[{"type":"paragraph","inlineContent":[{"text":"2000 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"1200 MByte\/Sec"}]}]]],"header":"row","type":"table"},{"anchor":"Key-Derivation","type":"heading","level":4,"text":"Key Derivation"},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"text":"\n","type":"text"},{"text":"Four cases are considered:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"ChaCha20\/Poly1305"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"Encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-128\/GCM"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 28 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 16 ..< 28"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-192\/GCM"}]}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 36 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-256\/GCM","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"]}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://SwiftECC/documentation/SwiftECC/Performance":{"title":"Performance","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","role":"article","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"title":"References","url":"\/documentation\/swiftecc\/references","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"role":"article","url":"\/documentation\/swiftecc\/keymanagement","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","title":"Key Management","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement"},"doc://SwiftECC/documentation/SwiftECC":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","kind":"symbol","type":"topic","title":"SwiftECC","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"title":"Encrypted Private Keys","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","kind":"article","role":"article","abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","role":"article","kind":"article","type":"topic","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"text":"Generating a shared secret","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"title":"Create new Domains","url":"\/documentation\/swiftecc\/createdomain","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"title":"Encrypt and Decrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","role":"article","type":"topic","url":"\/documentation\/swiftecc\/signverify","title":"Sign and Verify","kind":"article","abstract":[{"text":"Signing data and verifying signatures","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","kind":"article"}}}