{"sections":[],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"primaryContentSections":[{"content":[{"text":"","level":2,"anchor":"","type":"heading"},{"inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"text":" ","type":"text"},{"type":"text","text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms."}],"type":"paragraph"},{"type":"heading","anchor":"Example","level":4,"text":"Example"},{"syntax":"swift","type":"codeListing","code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Hi, there!","Hi, there!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,"},{"text":" ","type":"text"},{"type":"text","text":"Apple M1 chip is shown below - units are Megabytes per second."}]},{"type":"table","alignments":["right","right","right"],"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Encrypt"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"500 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"425 MByte\/Sec"}]}]],[[{"inlineContent":[{"type":"text","text":"AES-128\/GCM"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"2000 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"1200 MByte\/Sec","type":"text"}]}]]]},{"text":"Key Derivation","anchor":"Key-Derivation","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6."},{"type":"text","text":"\n"},{"text":"Four cases are considered:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"text":"\n","type":"text"},{"type":"text","text":"Encryption\/decryption key = bytes 0 ..< 32"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"AES-128\/GCM"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 28 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 16 ..< 28","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/GCM","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"KDF generates 36 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-256\/GCM"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 44 bytes.","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt"},"metadata":{"modules":[{"name":"SwiftECC"}],"role":"article","title":"AEAD Encrypt and Decrypt","roleHeading":"Article"},"references":{"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"role":"article","url":"\/documentation\/swiftecc\/createdomain","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","kind":"article","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"type":"topic","title":"Create new Domains"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"role":"article","url":"\/documentation\/swiftecc\/encryptdecrypt","abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","title":"Encrypt and Decrypt","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","type":"topic","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","kind":"article","url":"\/documentation\/swiftecc\/references","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}]},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"role":"article","url":"\/documentation\/swiftecc\/ecarithmetic","abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"role":"article","url":"\/documentation\/swiftecc\/signverify","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","type":"topic"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","title":"SwiftECC","type":"topic","url":"\/documentation\/swiftecc","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}],"role":"collection"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/swiftecc\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","title":"Key Management"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/acknowledgement","abstract":[{"text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","role":"article","title":"Acknowledgement"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","title":"Encrypted Private Keys"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","type":"topic","url":"\/documentation\/swiftecc\/performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"role":"article","title":"Secret Key Agreement","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","type":"topic","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"text":"Generating a shared secret","type":"text"}],"kind":"article"}}}