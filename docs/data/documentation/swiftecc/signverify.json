{"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"anchor":"Articles","title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"]}],"primaryContentSections":[{"content":[{"text":"","level":2,"anchor":"","type":"heading"},{"inlineContent":[{"type":"text","text":"Signing data and verifying signatures is performed using the ECDSA algorithm. It is possible to generate"},{"type":"text","text":" "},{"type":"text","text":"deterministic signatures as specified in [RFC 6979] by setting the "},{"code":"deterministic","type":"codeVoice"},{"type":"text","text":" parameter to "},{"code":"true","type":"codeVoice"},{"type":"text","text":" in the sign operation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The message digest used in the process is determined from the domain field size as follows:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"field size <= 224: SHA2-224","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"224 < field size <= 256: SHA2-256"}]}]},{"content":[{"inlineContent":[{"text":"256 < field size <= 384: SHA2-384","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"384 < field size: SHA2-512"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Example","level":4,"anchor":"Example","type":"heading"},{"code":["import SwiftECC","","\/\/ Get a predefined domain - for example brainpool BP160r1","","let domain = Domain.instance(curve: .BP160r1)","","\/\/ Create your own keys","","let (pubKey, privKey) = domain.makeKeyPair()","","\/\/ See how they look","","print(pubKey.asn1)","print(privKey.asn1)","","\/\/ Store them in PEM format for future use","","let pubPEM = pubKey.pem","let privPEM = privKey.pem","","let message = \"The quick brown fox jumps over the lazy dog!\".data(using: .utf8)!","","let sig = privKey.sign(msg: message)","let ok = pubKey.verify(signature: sig, msg: message)","print(\"Signature is\", ok ? \"good\" : \"wrong\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"code":["Sequence (2):","  Sequence (2):","    Object Identifier: 1.2.840.10045.2.1","    Object Identifier: 1.3.36.3.3.2.8.1.1.1","  Bit String (328): 00000100 00000011 00000111 00110011 01010100 00000001 10111100 01101111 10100001 01001000 11101000 01111100 10001111 00000110 00010010 11100111 11111010 10010001 00100100 01001000 11000110 01110001 00110100 01001000 10011110 01011110 11000000 10010001 01000110 01011010 01001110 01110000 00011011 01010111 10101011 01101010 00011011 01101100 01100100 01000100 01111101","","Sequence (4):","  Integer: 1","  Octet String (20): 32 96 e0 c4 d7 f5 cb 03 0c 95 63 b1 a2 c1 2f 64 4c dc d6 4c","  [0]:","    Object Identifier: 1.3.36.3.3.2.8.1.1.1","  [1]:","    Bit String (328): 00000100 00000011 00000111 00110011 01010100 00000001 10111100 01101111 10100001 01001000 11101000 01111100 10001111 00000110 00010010 11100111 11111010 10010001 00100100 01001000 11000110 01110001 00110100 01001000 10011110 01011110 11000000 10010001 01000110 01011010 01001110 01110000 00011011 01010111 10101011 01101010 00011011 01101100 01100100 01000100 01111101","","Signature is good"],"syntax":"swift","type":"codeListing"},{"text":"BlueECC Compatibility","level":4,"anchor":"BlueECC-Compatibility","type":"heading"},{"inlineContent":[{"type":"text","text":"Signatures created by SwiftECC in the EC256r1, EC384r1 and EC521r1 domains can be verified by IBMâ€™s BlueECC product"},{"type":"text","text":" "},{"type":"text","text":"using curve prime256v1, secp384r1 and secp521r1, respectively."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Likewise, signatures created by BlueECC with one of the curves"},{"type":"text","text":" "},{"type":"text","text":"prime256v1, secp384r1 and secp521r1 can be verified by SwiftECC using domains EC256r1, EC384r1 and EC521r1, respectively."}],"type":"paragraph"},{"text":"CryptoKit Compatibility","level":4,"anchor":"CryptoKit-Compatibility","type":"heading"},{"inlineContent":[{"type":"text","text":"Signatures created by SwiftECC in the EC256r1, EC384r1 and EC521r1 domains can be verified by CryptoKit"},{"type":"text","text":" "},{"type":"text","text":"using curve P256, P384 and P521, respectively."}],"type":"paragraph"},{"inlineContent":[{"text":"Likewise, signatures created by CryptoKit with one of the curves","type":"text"},{"text":" ","type":"text"},{"text":"P256, P384 and P521 can be verified by SwiftECC using domains EC256r1, EC384r1 and EC521r1, respectively.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swiftecc\/signverify"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"article","title":"Sign and Verify","modules":[{"name":"SwiftECC"}],"roleHeading":"Article"},"kind":"article","references":{"doc://SwiftECC/documentation/SwiftECC":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","kind":"symbol","type":"topic","title":"SwiftECC","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}]},"doc://SwiftECC/documentation/SwiftECC/Performance":{"title":"Performance","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","role":"article","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"title":"Encrypt and Decrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"title":"Create new Domains","url":"\/documentation\/swiftecc\/createdomain","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain"},"doc://SwiftECC/documentation/SwiftECC/References":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"title":"References","url":"\/documentation\/swiftecc\/references","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","type":"topic","abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"role":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","title":"AEAD Encrypt and Decrypt"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"title":"Encrypted Private Keys","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","kind":"article","role":"article","abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","role":"article","kind":"article","type":"topic","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"text":"Generating a shared secret","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"role":"article","url":"\/documentation\/swiftecc\/keymanagement","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","title":"Key Management","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement"}}}