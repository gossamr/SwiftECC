{"abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"metadata":{"title":"Create new Domains","modules":[{"name":"SwiftECC"}],"role":"article","roleHeading":"Article"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"","type":"heading","anchor":""},{"type":"heading","level":4,"anchor":"Example-1","text":"Example 1"},{"inlineContent":[{"type":"text","text":"This is example 3.5 from [GUIDE]. It shows how to make your own prime characteristic domain."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import SwiftECC","import BigInt","","\/\/ Create the domain","let domain = try Domain.instance(name: \"EC29\", p: BInt(29), a: BInt(4), b: BInt(20), gx: BInt(1), gy: BInt(5), order: BInt(37), cofactor: 1)","","let p1 = Point(BInt(5), BInt(22))","let p2 = Point(BInt(16), BInt(27))","","print(\"p1 + p2 =\", try domain.addPoints(p1, p2))","print(\"p1 * 2  =\", try domain.multiplyPoint(p1, BInt(2)))","","\/\/ Inspect the domain - please refer [SEC 1] appendix C.2","print(domain.asn1Explicit())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","code":["p1 + p2 = Point(13, 6)","p1 * 2  = Point(14, 6)","Sequence (6):","  Integer: 1","  Sequence (2):","    Object Identifier: 1.2.840.10045.1.1","    Integer: 29","  Sequence (2):","    Octet String (1): 04","    Octet String (1): 14","  Octet String (3): 04 01 05","  Integer: 37","  Integer: 1"],"syntax":"swift"},{"level":4,"text":"Example 2","type":"heading","anchor":"Example-2"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is example 3.6 from [GUIDE]. It shows how to make your own characteristic 2 domain."}]},{"syntax":"swift","code":["import SwiftECC","import BigInt","","\/\/ Reduction polynomial for x^4 + x^1 + 1    ","let rp = RP(4, 1)","","\/\/ Create the domain","let domain = try Domain.instance(name: \"EC4\", rp: rp, a: BInt(8), b: BInt(9), gx: BInt(1), gy: BInt(1), order: BInt(22), cofactor: 2)","","let p1 = Point(BInt(2), BInt(15))","let p2 = Point(BInt(12), BInt(12))","","print(\"p1 + p2 =\", try domain.addPoints(p1, p2))","print(\"p1 * 2  =\", try domain.multiplyPoint(p1, BInt(2)))","","\/\/ Inspect the domain - please refer [SEC 1] appendix C.2","print(domain.asn1Explicit())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","type":"codeListing","code":["p1 + p2 = Point(1, 1)","p1 * 2  = Point(11, 2)","Sequence (6):","  Integer: 1","  Sequence (2):","    Object Identifier: 1.2.840.10045.1.2","    Sequence (2):","      Integer: 4","      Integer: 1","  Sequence (2):","    Octet String (1): 08","    Octet String (1): 09","  Octet String (3): 04 01 01","  Integer: 22","  Integer: 2"]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain"},"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"sections":[],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"variants":[{"paths":["\/documentation\/swiftecc\/createdomain"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","type":"topic","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","kind":"article","url":"\/documentation\/swiftecc\/references","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","title":"Encrypted Private Keys"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","title":"SwiftECC","type":"topic","url":"\/documentation\/swiftecc","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}],"role":"collection"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/acknowledgement","abstract":[{"text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","role":"article","title":"Acknowledgement"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"role":"article","url":"\/documentation\/swiftecc\/encryptdecrypt","abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","title":"Encrypt and Decrypt","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"role":"article","title":"Secret Key Agreement","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","type":"topic","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"text":"Generating a shared secret","type":"text"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","title":"AEAD Encrypt and Decrypt","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","role":"article","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","type":"topic","url":"\/documentation\/swiftecc\/performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"role":"article","url":"\/documentation\/swiftecc\/ecarithmetic","abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/swiftecc\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","title":"Key Management"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"role":"article","url":"\/documentation\/swiftecc\/signverify","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","type":"topic"}}}