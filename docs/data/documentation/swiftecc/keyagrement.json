{"sections":[],"abstract":[{"type":"text","text":"Generating a shared secret"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"","text":"","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The other party can generate the same byte array by using his own private key and your public key."}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftECC supports three mechanisms:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The basic Diffie-Hellman primitive"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The X9.63 version specified in [SEC 1] section 3.6.1","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The HKDF version specified in [RFC 5869]"}]}]}],"type":"unorderedList"},{"anchor":"Basic-Diffie-Hellman-Example","text":"Basic Diffie-Hellman Example","level":4,"type":"heading"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"],"type":"codeListing"},{"anchor":"X963-Example","text":"X9.63 Example","level":4,"type":"heading"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"type":"codeListing"},{"inlineContent":[{"text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use.","type":"text"}],"type":"paragraph"},{"anchor":"HKDF-Example","text":"HKDF Example","level":4,"type":"heading"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"],"type":"codeListing"},{"inlineContent":[{"text":"For the key agreement to work, the two parties must agree on which domain, which message digest,","type":"text"},{"text":" ","type":"text"},{"text":"which shared information (possibly none) and which salt (possibly none) to use.","type":"text"}],"type":"paragraph"},{"anchor":"CryptoKit-Compatibility","text":"CryptoKit Compatibility","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with CryptoKit key agreement"},{"type":"text","text":" "},{"type":"text","text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,"},{"type":"text","text":" "},{"type":"text","text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)","isActive":true},{"type":"text","text":" method corresponds to the CryptoKit method "},{"type":"codeVoice","code":"sharedSecretFromKeyAgreement"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","isActive":true},{"type":"text","text":" method corresponds to the CryptoKit method "},{"type":"codeVoice","code":"x963DerivedSymmetricKey"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"code":"hkdfDerivedSymmetricKey","type":"codeVoice"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"To convert CryptoKit keys - say ","type":"text"},{"type":"codeVoice","code":"ckPubKey"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ckPrivKey"},{"text":" - to the corresponding SwiftECC keys:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"],"type":"codeListing"},{"inlineContent":[{"text":"To convert SwiftECC keys - say ","type":"text"},{"type":"codeVoice","code":"eccPubKey"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"eccPrivKey"},{"text":" - to the corresponding CryptoKit keys:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"],"type":"codeListing"}]}],"seeAlsoSections":[{"generated":true,"anchor":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"title":"Articles"}],"metadata":{"modules":[{"name":"SwiftECC"}],"roleHeading":"Article","role":"article","title":"Secret Key Agreement"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/swiftecc\/keyagrement"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"references":{"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"x963KeyAgreement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pubKey","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ECPublicKey","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"kind"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C","text":"MessageDigest"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C4KindO","text":"Kind"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sharedInfo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cofactor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"}],"type":"topic","abstract":[{"type":"text","text":"Computes a shared secret key using Diffie-Hellman key agreement"}],"title":"x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","url":"\/documentation\/swiftecc\/ecprivatekey\/x963keyagreement(pubkey:length:kind:sharedinfo:cofactor:)","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)"},"doc://SwiftECC/documentation/SwiftECC/References":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"title":"References","url":"\/documentation\/swiftecc\/references","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hkdfKeyAgreement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pubKey","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ECPublicKey","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"kind"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C","text":"MessageDigest"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C4KindO","text":"Kind"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sharedInfo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"salt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cofactor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"}],"type":"topic","abstract":[{"type":"text","text":"Computes a shared secret key using Diffie-Hellman key agreement"}],"title":"hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)","url":"\/documentation\/swiftecc\/ecprivatekey\/hkdfkeyagreement(pubkey:length:kind:sharedinfo:salt:cofactor:)","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"title":"Encrypt and Decrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"title":"Create new Domains","url":"\/documentation\/swiftecc\/createdomain","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","kind":"article"},"doc://SwiftECC/documentation/SwiftECC":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","kind":"symbol","type":"topic","title":"SwiftECC","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}]},"doc://SwiftECC/documentation/SwiftECC/Performance":{"title":"Performance","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","role":"article","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/sharedSecret(pubKey:cofactor:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sharedSecret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pubKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","text":"ECPublicKey"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cofactor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"}],"role":"symbol","url":"\/documentation\/swiftecc\/ecprivatekey\/sharedsecret(pubkey:cofactor:)","type":"topic","abstract":[{"type":"text","text":"Computes a shared secret using the Diffie-Hellman key agreement primitive"}],"title":"sharedSecret(pubKey:cofactor:)","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"title":"Encrypted Private Keys","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","kind":"article","role":"article","abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"role":"article","url":"\/documentation\/swiftecc\/keymanagement","kind":"article","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","title":"Key Management","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","type":"topic","abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"role":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","title":"AEAD Encrypt and Decrypt"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","role":"article","type":"topic","url":"\/documentation\/swiftecc\/signverify","title":"Sign and Verify","kind":"article","abstract":[{"text":"Signing data and verifying signatures","type":"text"}]}}}