{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Generating a shared secret"}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"generated":true}],"metadata":{"modules":[{"name":"SwiftECC"}],"roleHeading":"Article","title":"Secret Key Agreement","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"","anchor":"","type":"heading"},{"inlineContent":[{"text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other party can generate the same byte array by using his own private key and your public key."}]},{"inlineContent":[{"text":"SwiftECC supports three mechanisms:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The basic Diffie-Hellman primitive"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The X9.63 version specified in [SEC 1] section 3.6.1"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The HKDF version specified in [RFC 5869]","type":"text"}]}]}]},{"level":4,"text":"Basic Diffie-Hellman Example","anchor":"Basic-Diffie-Hellman-Example","type":"heading"},{"syntax":"swift","type":"codeListing","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"]},{"level":4,"anchor":"X963-Example","type":"heading","text":"X9.63 Example"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"syntax":"swift","code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use."}]},{"type":"heading","anchor":"HKDF-Example","text":"HKDF Example","level":4},{"code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"]},{"inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest,"},{"type":"text","text":" "},{"type":"text","text":"which shared information (possibly none) and which salt (possibly none) to use."}],"type":"paragraph"},{"type":"heading","text":"CryptoKit Compatibility","level":4,"anchor":"CryptoKit-Compatibility"},{"inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with CryptoKit key agreement"},{"text":" ","type":"text"},{"text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,","type":"text"},{"type":"text","text":" "},{"text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)","isActive":true,"type":"reference"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"sharedSecretFromKeyAgreement","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","type":"reference"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"x963DerivedSymmetricKey","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)","isActive":true,"type":"reference"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"code":"hkdfDerivedSymmetricKey","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert CryptoKit keys - say "},{"code":"ckPubKey","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ckPrivKey","type":"codeVoice"},{"text":" - to the corresponding SwiftECC keys:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"]},{"inlineContent":[{"type":"text","text":"To convert SwiftECC keys - say "},{"type":"codeVoice","code":"eccPubKey"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"eccPrivKey"},{"text":" - to the corresponding CryptoKit keys:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"]}]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"variants":[{"paths":["\/documentation\/swiftecc\/keyagrement"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftECC/documentation/SwiftECC/Performance":{"url":"\/documentation\/swiftecc\/performance","type":"topic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article","title":"Performance"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"abstract":[{"text":"ECIES encryption and decryption","type":"text"}],"title":"Encrypt and Decrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","title":"SwiftECC"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","url":"\/documentation\/swiftecc\/signverify","title":"Sign and Verify","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)","abstract":[{"text":"Computes a shared secret key using Diffie-Hellman key agreement","type":"text"}],"kind":"symbol","url":"\/documentation\/swiftecc\/ecprivatekey\/hkdfkeyagreement(pubkey:length:kind:sharedinfo:salt:cofactor:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"hkdfKeyAgreement","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"pubKey"},{"text":": ","kind":"text"},{"text":"ECPublicKey","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"kind"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C","text":"MessageDigest"},{"kind":"text","text":"."},{"preciseIdentifier":"s:6Digest07MessageA0C4KindO","text":"Kind","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"sharedInfo"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"salt"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cofactor"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"title":"hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","abstract":[{"text":"Computes a shared secret key using Diffie-Hellman key agreement","type":"text"}],"kind":"symbol","url":"\/documentation\/swiftecc\/ecprivatekey\/x963keyagreement(pubkey:length:kind:sharedinfo:cofactor:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"x963KeyAgreement"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"pubKey"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","text":"ECPublicKey"},{"kind":"text","text":", "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"kind"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:6Digest07MessageA0C","text":"MessageDigest","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:6Digest07MessageA0C4KindO","kind":"typeIdentifier","text":"Kind"},{"kind":"text","text":", "},{"text":"sharedInfo","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cofactor"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"}],"title":"x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/sharedSecret(pubKey:cofactor:)":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)","kind":"symbol","abstract":[{"text":"Computes a shared secret using the Diffie-Hellman key agreement primitive","type":"text"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/sharedsecret(pubkey:cofactor:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sharedSecret","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pubKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","kind":"typeIdentifier","text":"ECPublicKey"},{"kind":"text","text":", "},{"text":"cofactor","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"title":"sharedSecret(pubKey:cofactor:)","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","role":"article","kind":"article","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","type":"topic","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","type":"topic","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","role":"article","kind":"article","title":"AEAD Encrypt and Decrypt","type":"topic","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","abstract":[{"text":"Authenticated Encryption with Associated Data","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/References":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","kind":"article","title":"References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]}}}