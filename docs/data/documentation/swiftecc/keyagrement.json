{"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/keyagrement"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"","level":2,"anchor":""},{"inlineContent":[{"type":"text","text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The other party can generate the same byte array by using his own private key and your public key."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC supports three mechanisms:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The basic Diffie-Hellman primitive","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The X9.63 version specified in [SEC 1] section 3.6.1","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The HKDF version specified in [RFC-5869]"}]}]}]},{"text":"Basic Diffie-Hellman Example","type":"heading","anchor":"Basic-Diffie-Hellman-Example","level":3},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","syntax":"swift","code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"]},{"level":3,"type":"heading","anchor":"X963-Example","text":"X9.63 Example"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use."}]},{"type":"heading","text":"HKDF Example","level":3,"anchor":"HKDF-Example"},{"code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For the key agreement to work, the two parties must agree on which domain, which message digest,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which shared information (possibly none) and which salt (possibly none) to use."}]},{"type":"heading","level":3,"text":"CryptoKit Compatibility","anchor":"CryptoKit-Compatibility"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with Apple CryptoKit key agreement"},{"type":"text","text":" "},{"text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,","type":"text"},{"type":"text","text":" "},{"text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"sharedSecret"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"sharedSecretFromKeyAgreement","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"x963KeyAgreement"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"x963DerivedSymmetricKey","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"hkdfKeyAgreement"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"type":"codeVoice","code":"hkdfDerivedSymmetricKey"}]}]}]},{"inlineContent":[{"text":"To convert CryptoKit keys - e.g. ","type":"text"},{"code":"ckPubKey","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ckPrivKey"},{"type":"text","text":" - to the corresponding SwiftECC keys:"}],"type":"paragraph"},{"code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert SwiftECC keys - e.g. "},{"code":"eccPubKey","type":"codeVoice"},{"type":"text","text":", "},{"code":"eccPrivKey","type":"codeVoice"},{"text":" - to the corresponding CryptoKit keys:","type":"text"}]},{"code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"],"syntax":"swift","type":"codeListing"}]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftECC"}],"title":"Secret Key Agreement"},"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"]}],"references":{"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","title":"Create new Domains","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","url":"\/documentation\/swiftecc\/createdomain","kind":"article","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"title":"Acknowledgement","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/acknowledgement"},"doc://SwiftECC/documentation/SwiftECC/Basics":{"title":"Basics","kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","url":"\/documentation\/swiftecc\/basics","type":"topic","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"kind":"article","title":"Dependencies","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","url":"\/documentation\/swiftecc\/dependencies","type":"topic","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"title":"References","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/references"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"title":"Sign and Verify","kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","url":"\/documentation\/swiftecc\/signverify","type":"topic","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/Usage":{"url":"\/documentation\/swiftecc\/usage","role":"article","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","kind":"article","title":"Usage"},"doc://SwiftECC/documentation/SwiftECC":{"type":"topic","abstract":[],"title":"SwiftECC","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","url":"\/documentation\/swiftecc"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"url":"\/documentation\/swiftecc\/ecarithmetic","kind":"article","title":"Elliptic Curve Arithmetic","abstract":[],"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"url":"\/documentation\/swiftecc\/encryptdecrypt","kind":"article","title":"Encrypt and Decrypt","abstract":[],"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"type":"topic","title":"Load exsisting Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","url":"\/documentation\/swiftecc\/loadkeys","kind":"article","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"role":"article","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","kind":"article","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"title":"AEAD Encrypt and Decrypt","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt"},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"title":"Create new Keys","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/createkeys"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"title":"Performance","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/performance"}}}