{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"variants":[{"paths":["\/documentation\/swiftecc\/encryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true,"title":"Articles"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftECC"}],"title":"Encrypt and Decrypt"},"primaryContentSections":[{"content":[{"anchor":"","level":2,"text":"","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of"},{"text":" ","type":"text"},{"text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice.","type":"text"}]},{"inlineContent":[{"text":"The following cipher block modes are supported:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"GCM","type":"text"}],"type":"strong"},{"text":" - Galois Counter mode. This is the default mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ECB"}]},{"text":" - Electronic Codebook mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CBC"}]},{"text":" - Cipher Block Chaining mode with PKCS#7 padding","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CFB"}],"type":"strong"},{"type":"text","text":" - Cipher Feedback mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CTR"}],"type":"strong"},{"type":"text","text":" - Counter mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"OFB"}],"type":"strong"},{"type":"text","text":" - Output Feedback mode"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip"},{"type":"text","text":" "},{"text":"using AES-128 is shown below - units are Megabytes per second.","type":"text"}]},{"alignments":["left","right","right"],"header":"row","rows":[[[{"inlineContent":[{"text":"Block Mode","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Encrypt","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"inlineContent":[{"text":"GCM","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"53 MByte\/Sec","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"53 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"ECB"}]}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CBC","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"24 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"25 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CFB","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"23 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"23 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CTR","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}]],[[{"inlineContent":[{"type":"text","text":"OFB"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"29 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"Unless compatibility with IBMâ€™s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated."},{"text":" ","type":"text"},{"type":"text","text":"Use the "},{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","type":"reference","isActive":true},{"type":"text","text":" \/ "},{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","isActive":true,"type":"reference"},{"type":"text","text":" methods instead. Their performance is many times better."}],"type":"paragraph"},{"type":"heading","anchor":"Example","text":"Example","level":4},{"type":"codeListing","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["The quick brown fox jumps over the lazy dog!"],"syntax":"swift","type":"codeListing"},{"text":"Key Derivation","anchor":"Key-Derivation","type":"heading","level":4},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"text":" ","type":"text"},{"text":"Six cases are considered:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-128\/GCM block mode","type":"text"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 32 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 16 ..< 32","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/GCM block mode","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 40 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 24 ..< 40"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-256\/GCM block mode","type":"text"}],"type":"strong"}]},{"inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 32 ..< 48","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"AES-128\/Non-GCM block mode"}],"type":"strong"}]},{"inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 16 ..< 48"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/Non-GCM block mode","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 24 ..< 56"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-256\/Non-GCM block mode"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 64 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"type":"text","text":"\n"},{"text":"HMAC key = bytes 32 ..< 64","type":"text"}]}]}],"type":"unorderedList"},{"level":4,"text":"IV","type":"heading","anchor":"IV"},{"inlineContent":[{"type":"text","text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The AES key and HMAC key can be retrieved with the "},{"code":"ECPrivateKey","type":"codeVoice"},{"type":"text","text":" method "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z"},{"type":"text","text":"."}]},{"level":4,"type":"heading","anchor":"BlueECC-Compatibility","text":"BlueECC Compatibility"},{"type":"paragraph","inlineContent":[{"text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM","type":"text"},{"type":"text","text":" "},{"text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBMâ€™s BlueECC product using curve prime256v1,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"secp384r1, and secp521r1, respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"type":"text","text":" "},{"text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively.","type":"text"}]}],"kind":"content"}],"sections":[],"references":{"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"role":"article","title":"Secret Key Agreement","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","type":"topic","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"text":"Generating a shared secret","type":"text"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/decryptAESGCM(msg:cipher:aad:)-7hhik":{"abstract":[{"type":"text","text":"Decrypts a byte array message with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/decryptaesgcm(msg:cipher:aad:)-7hhik","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","title":"decryptAESGCM(msg:cipher:aad:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decryptAESGCM","kind":"identifier"},{"kind":"text","text":"("},{"text":"msg","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cipher"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"kind":"text","text":", "},{"text":"aad","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"role":"article","url":"\/documentation\/swiftecc\/createdomain","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","kind":"article","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"type":"topic","title":"Create new Domains"},"doc://SwiftECC/documentation/SwiftECC/ECPublicKey/encryptAESGCM(msg:cipher:aad:)-7ow39":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encryptAESGCM"},{"kind":"text","text":"("},{"text":"msg","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cipher"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Encrypts a byte array with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","title":"encryptAESGCM(msg:cipher:aad:)","url":"\/documentation\/swiftecc\/ecpublickey\/encryptaesgcm(msg:cipher:aad:)-7ow39","role":"symbol","type":"topic","kind":"symbol"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"role":"article","url":"\/documentation\/swiftecc\/ecarithmetic","abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/getKeyAndMac(msg:cipher:mode:)-8d85z":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","abstract":[{"type":"text","text":"Returns the AES key and HMAC key that were used to encrypt the message"}],"kind":"symbol","role":"symbol","title":"getKeyAndMac(msg:cipher:mode:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"getKeyAndMac","kind":"identifier"},{"text":"(","kind":"text"},{"text":"msg","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC9AESCipherO","kind":"typeIdentifier","text":"AESCipher"},{"kind":"text","text":", "},{"text":"mode","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"BlockMode","preciseIdentifier":"s:8SwiftECC9BlockModeO"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> (key","kind":"text"},{"text":": ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"kind":"text","text":", mac"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":")","kind":"text"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/getkeyandmac(msg:cipher:mode:)-8d85z"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","title":"AEAD Encrypt and Decrypt","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","role":"article","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/acknowledgement","abstract":[{"text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","role":"article","title":"Acknowledgement"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","title":"SwiftECC","type":"topic","url":"\/documentation\/swiftecc","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}],"role":"collection"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","type":"topic","url":"\/documentation\/swiftecc\/performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","type":"topic","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","kind":"article","url":"\/documentation\/swiftecc\/references","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"kind":"article","type":"topic","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","title":"Encrypted Private Keys"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/swiftecc\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","title":"Key Management"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"role":"article","url":"\/documentation\/swiftecc\/signverify","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","type":"topic"}}}