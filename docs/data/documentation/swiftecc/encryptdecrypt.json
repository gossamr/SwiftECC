{"metadata":{"title":"Encrypt and Decrypt","roleHeading":"Article","role":"article","modules":[{"name":"SwiftECC"}]},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"generated":true,"title":"Articles"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/encryptdecrypt"]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"primaryContentSections":[{"content":[{"text":"","type":"heading","level":2,"anchor":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of"},{"type":"text","text":" "},{"type":"text","text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following cipher block modes are supported:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"GCM"}],"type":"strong"},{"text":" - Galois Counter mode. This is the default mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"ECB","type":"text"}],"type":"strong"},{"type":"text","text":" - Electronic Codebook mode with PKCS#7 padding"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"CBC","type":"text"}]},{"text":" - Cipher Block Chaining mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"CFB","type":"text"}],"type":"strong"},{"text":" - Cipher Feedback mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CTR"}]},{"type":"text","text":" - Counter mode"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"OFB","type":"text"}]},{"text":" - Output Feedback mode","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using AES-128 is shown below - units are Megabytes per second."}],"type":"paragraph"},{"alignments":["left","right","right"],"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Block Mode"}]}],[{"type":"paragraph","inlineContent":[{"text":"Encrypt","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"GCM"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"ECB"}]}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CBC"}]}],[{"inlineContent":[{"type":"text","text":"24 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"25 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB"}]}],[{"inlineContent":[{"type":"text","text":"23 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"23 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CTR"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"OFB"}]}],[{"inlineContent":[{"type":"text","text":"29 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless compatibility with IBMâ€™s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated."},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","isActive":true},{"type":"text","text":" \/ "},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","isActive":true},{"text":" methods instead. Their performance is many times better.","type":"text"}]},{"level":4,"type":"heading","anchor":"Example","text":"Example"},{"syntax":"swift","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","syntax":"swift","code":["The quick brown fox jumps over the lazy dog!"]},{"type":"heading","anchor":"Key-Derivation","level":4,"text":"Key Derivation"},{"type":"paragraph","inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Six cases are considered:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-128\/GCM block mode"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 32 bytes."},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 16 ..< 32","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/GCM block mode","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 40 bytes."},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 40","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-256\/GCM block mode"}]}]},{"inlineContent":[{"type":"text","text":"KDF generates 48 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 32 ..< 48","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-128\/Non-GCM block mode","type":"text"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 16 ..< 48"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-192\/Non-GCM block mode"}]}]},{"inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 24 ..< 56"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-256\/Non-GCM block mode","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 64 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 32 ..< 64"}]}]}]},{"type":"heading","text":"IV","anchor":"IV","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes."}]},{"type":"paragraph","inlineContent":[{"text":"The AES key and HMAC key can be retrieved with the ","type":"text"},{"code":"ECPrivateKey","type":"codeVoice"},{"type":"text","text":" method "},{"isActive":true,"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","type":"reference"},{"text":".","type":"text"}]},{"level":4,"text":"BlueECC Compatibility","anchor":"BlueECC-Compatibility","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM"},{"text":" ","type":"text"},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBMâ€™s BlueECC product using curve prime256v1,"},{"text":" ","type":"text"},{"text":"secp384r1, and secp521r1, respectively.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"text":" ","type":"text"},{"text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","type":"topic","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","role":"article"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","url":"\/documentation\/swiftecc\/signverify","title":"Sign and Verify","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","kind":"article","title":"References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","role":"article","kind":"article","title":"AEAD Encrypt and Decrypt","type":"topic","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","abstract":[{"text":"Authenticated Encryption with Associated Data","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/getKeyAndMac(msg:cipher:mode:)-8d85z":{"title":"getKeyAndMac(msg:cipher:mode:)","abstract":[{"type":"text","text":"Returns the AES key and HMAC key that were used to encrypt the message"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","url":"\/documentation\/swiftecc\/ecprivatekey\/getkeyandmac(msg:cipher:mode:)-8d85z","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getKeyAndMac"},{"kind":"text","text":"("},{"text":"msg","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cipher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO","text":"AESCipher"},{"text":", ","kind":"text"},{"text":"mode","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9BlockModeO","text":"BlockMode"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> (key","kind":"text"},{"text":": ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":", mac","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier","text":"Bytes"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/decryptAESGCM(msg:cipher:aad:)-7hhik":{"title":"decryptAESGCM(msg:cipher:aad:)","abstract":[{"text":"Decrypts a byte array message with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data","type":"text"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","url":"\/documentation\/swiftecc\/ecprivatekey\/decryptaesgcm(msg:cipher:aad:)-7hhik","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decryptAESGCM","kind":"identifier"},{"text":"(","kind":"text"},{"text":"msg","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier","text":"Bytes"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cipher"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC9AESCipherO","text":"AESCipher","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"aad"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"kind":"symbol"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","url":"\/documentation\/swiftecc","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","title":"SwiftECC"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"url":"\/documentation\/swiftecc\/performance","type":"topic","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"kind":"article","title":"Performance"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","role":"article","kind":"article","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","type":"topic","abstract":[{"text":"Creating new keys and loading exsisting keys","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/ECPublicKey/encryptAESGCM(msg:cipher:aad:)-7ow39":{"kind":"symbol","title":"encryptAESGCM(msg:cipher:aad:)","abstract":[{"text":"Encrypts a byte array with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data","type":"text"}],"url":"\/documentation\/swiftecc\/ecpublickey\/encryptaesgcm(msg:cipher:aad:)-7ow39","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encryptAESGCM"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"msg"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"kind":"text","text":": "},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"type":"topic","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","abstract":[{"text":"Generating a shared secret","type":"text"}],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","role":"article"}}}