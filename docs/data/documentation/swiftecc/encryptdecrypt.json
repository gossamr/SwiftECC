{"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"metadata":{"title":"Encrypt and Decrypt","roleHeading":"Article","modules":[{"name":"SwiftECC"}],"role":"article"},"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"","level":2,"type":"heading","anchor":""},{"type":"paragraph","inlineContent":[{"text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of","type":"text"},{"type":"text","text":" "},{"text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following cipher block modes are supported:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"GCM","type":"text"}],"type":"strong"},{"type":"text","text":" - Galois Counter mode. This is the default mode"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"ECB"}],"type":"strong"},{"text":" - Electronic Codebook mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CBC"}]},{"text":" - Cipher Block Chaining mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CFB"}]},{"type":"text","text":" - Cipher Feedback mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CTR"}],"type":"strong"},{"type":"text","text":" - Counter mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"OFB"}]},{"type":"text","text":" - Output Feedback mode"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip","type":"text"},{"text":" ","type":"text"},{"text":"using AES-128 is shown below - units are Megabytes per second.","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Block Mode"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Encrypt"}]}],[{"inlineContent":[{"text":"Decrypt","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"GCM","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"ECB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}]],[[{"inlineContent":[{"type":"text","text":"CBC"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"24 MByte\/Sec","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"25 MByte\/Sec"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"CFB"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"23 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"23 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"CTR","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"OFB"}]}],[{"inlineContent":[{"type":"text","text":"29 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"29 MByte\/Sec","type":"text"}]}]]],"header":"row","type":"table","alignments":["left","right","right"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless compatibility with IBM’s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated."},{"type":"text","text":" "},{"text":"Use the encryptAESGCM \/ decryptAESGCM methods instead. Their performance is many times better.","type":"text"}]},{"type":"heading","level":3,"anchor":"Example","text":"Example"},{"code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["The quick brown fox jumps over the lazy dog!"],"type":"codeListing","syntax":"swift"},{"anchor":"Key-Derivation","text":"Key Derivation","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6."},{"text":" ","type":"text"},{"text":"Six cases are considered:","type":"text"}]},{"type":"heading","level":4,"text":"AES-128\/GCM block mode","anchor":"AES-128GCM-block-mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 32 bytes."}]},{"inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Nonce = bytes 16 ..< 32"}],"type":"paragraph"},{"type":"heading","anchor":"AES-192GCM-block-mode","level":4,"text":"AES-192\/GCM block mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 40 bytes."}]},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nonce = bytes 24 ..< 40"}]},{"anchor":"AES-256GCM-block-mode","text":"AES-256\/GCM block mode","level":4,"type":"heading"},{"inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"}]},{"type":"paragraph","inlineContent":[{"text":"Nonce = bytes 32 ..< 48","type":"text"}]},{"type":"heading","text":"AES-128\/Non-GCM block mode","anchor":"AES-128Non-GCM-block-mode","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 48 bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"}]},{"inlineContent":[{"text":"HMAC key = bytes 16 ..< 48","type":"text"}],"type":"paragraph"},{"text":"AES-192\/Non-GCM block mode","type":"heading","level":4,"anchor":"AES-192Non-GCM-block-mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 56 bytes."}]},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"}]},{"inlineContent":[{"type":"text","text":"HMAC key = bytes 24 ..< 56"}],"type":"paragraph"},{"level":4,"anchor":"AES-256Non-GCM-block-mode","type":"heading","text":"AES-256\/Non-GCM block mode"},{"inlineContent":[{"text":"KDF generates 64 bytes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"HMAC key = bytes 32 ..< 64","type":"text"}]},{"type":"heading","text":"","anchor":"","level":3},{"type":"paragraph","inlineContent":[{"text":"The AES key and HMAC key can be retrieved with the ","type":"text"},{"code":"ECPrivateKey","type":"codeVoice"},{"text":" method ","type":"text"},{"code":"getKeyAndMac","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes.","type":"text"}],"type":"paragraph"},{"anchor":"BlueECC-Compatibility","type":"heading","text":"BlueECC Compatibility","level":3},{"inlineContent":[{"type":"text","text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM"},{"type":"text","text":" "},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBM’s BlueECC product using curve prime256v1,"},{"type":"text","text":" "},{"type":"text","text":"secp384r1, and secp521r1, respectively."}],"type":"paragraph"},{"inlineContent":[{"text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively."}],"type":"paragraph"}]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/swiftecc\/encryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"abstract":[],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/loadkeys","title":"Load exsisting Keys"},"doc://SwiftECC/documentation/SwiftECC/Basics":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","abstract":[],"type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/basics","title":"Basics"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","abstract":[],"type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","title":"AEAD Encrypt and Decrypt"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","title":"Encrypted Private Keys","role":"article","url":"\/documentation\/swiftecc\/encryptedkeys","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","kind":"article","title":"Dependencies","url":"\/documentation\/swiftecc\/dependencies","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"title":"Create new Domains","url":"\/documentation\/swiftecc\/createdomain","abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","role":"article","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","title":"Elliptic Curve Arithmetic","role":"article","url":"\/documentation\/swiftecc\/ecarithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/References":{"abstract":[],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","title":"References","url":"\/documentation\/swiftecc\/references","role":"article","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","role":"article","title":"Create new Keys","kind":"article","abstract":[],"url":"\/documentation\/swiftecc\/createkeys"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","type":"topic","abstract":[],"role":"article","kind":"article","url":"\/documentation\/swiftecc\/acknowledgement","title":"Acknowledgement"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","role":"article","url":"\/documentation\/swiftecc\/keyagrement","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Usage":{"kind":"article","title":"Usage","abstract":[],"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","type":"topic","url":"\/documentation\/swiftecc\/usage"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","abstract":[],"title":"SwiftECC","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","type":"topic","url":"\/documentation\/swiftecc"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"title":"Sign and Verify","url":"\/documentation\/swiftecc\/signverify","abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","role":"article","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"abstract":[],"kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","title":"Performance","role":"article","type":"topic"}}}