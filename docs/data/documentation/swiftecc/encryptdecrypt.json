{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/encryptdecrypt"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"sections":[],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"","text":""},{"type":"paragraph","inlineContent":[{"text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of","type":"text"},{"type":"text","text":" "},{"text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following cipher block modes are supported:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"GCM - Galois Counter mode. This is the default mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ECB - Electronic Codebook mode with PKCS#7 padding","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"CBC - Cipher Block Chaining mode with PKCS#7 padding"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"CFB - Cipher Feedback mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"CTR - Counter mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"OFB - Output Feedback mode"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using AES-128 is shown below - units are Megabytes per second."}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Block Mode"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Encrypt"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"GCM","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"53 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}]],[[{"inlineContent":[{"text":"ECB","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"30 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CBC"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"24 MByte\/Sec"}]}],[{"inlineContent":[{"type":"text","text":"25 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB"}]}],[{"inlineContent":[{"type":"text","text":"23 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CTR","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"OFB"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"29 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"29 MByte\/Sec","type":"text"}]}]]]},{"inlineContent":[{"type":"text","text":"Unless compatibility with IBM’s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated."},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"encryptAESGCM"},{"text":" \/ ","type":"text"},{"type":"codeVoice","code":"decryptAESGCM"},{"text":" methods instead. Their performance is many times better.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Example","level":3,"anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving"}]},{"code":["The quick brown fox jumps over the lazy dog!"],"syntax":"swift","type":"codeListing"},{"text":"Key Derivation","anchor":"Key-Derivation","level":3,"type":"heading"},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"type":"text","text":" "},{"text":"Six cases are considered:","type":"text"}],"type":"paragraph"},{"anchor":"AES-128GCM-block-mode","type":"heading","level":4,"text":"AES-128\/GCM block mode"},{"inlineContent":[{"type":"text","text":"KDF generates 32 bytes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nonce = bytes 16 ..< 32"}]},{"type":"heading","level":4,"text":"AES-192\/GCM block mode","anchor":"AES-192GCM-block-mode"},{"inlineContent":[{"text":"KDF generates 40 bytes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Nonce = bytes 24 ..< 40"}],"type":"paragraph"},{"type":"heading","level":4,"text":"AES-256\/GCM block mode","anchor":"AES-256GCM-block-mode"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"}]},{"inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nonce = bytes 32 ..< 48"}]},{"text":"AES-128\/Non-GCM block mode","type":"heading","level":4,"anchor":"AES-128Non-GCM-block-mode"},{"inlineContent":[{"type":"text","text":"KDF generates 48 bytes."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"HMAC key = bytes 16 ..< 48"}]},{"level":4,"type":"heading","anchor":"AES-192Non-GCM-block-mode","text":"AES-192\/Non-GCM block mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 56 bytes."}]},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"HMAC key = bytes 24 ..< 56","type":"text"}]},{"anchor":"AES-256Non-GCM-block-mode","type":"heading","level":4,"text":"AES-256\/Non-GCM block mode"},{"inlineContent":[{"type":"text","text":"KDF generates 64 bytes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"}]},{"inlineContent":[{"type":"text","text":"HMAC key = bytes 32 ..< 64"}],"type":"paragraph"},{"type":"heading","text":"","anchor":"","level":3},{"inlineContent":[{"type":"text","text":"The AES key and HMAC key can be retrieved with the ECPrivateKey method "},{"type":"codeVoice","code":"getKeyAndMac"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes."}]},{"text":"BlueECC Compatibility","level":3,"type":"heading","anchor":"BlueECC-Compatibility"},{"type":"paragraph","inlineContent":[{"text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBM’s BlueECC product using curve prime256v1,"},{"type":"text","text":" "},{"text":"secp384r1, and secp521r1, respectively.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"text":" ","type":"text"},{"text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","metadata":{"modules":[{"name":"SwiftECC"}],"roleHeading":"Article","role":"article","title":"Encrypt and Decrypt"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"references":{"doc://SwiftECC/documentation/SwiftECC/Basics":{"title":"Basics","kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","url":"\/documentation\/swiftecc\/basics","type":"topic","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/Usage":{"url":"\/documentation\/swiftecc\/usage","role":"article","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","kind":"article","title":"Usage"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"title":"Performance","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/performance"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"title":"Sign and Verify","kind":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","url":"\/documentation\/swiftecc\/signverify","type":"topic","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC":{"type":"topic","abstract":[],"title":"SwiftECC","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","role":"collection","url":"\/documentation\/swiftecc"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"title":"Acknowledgement","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/acknowledgement"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","title":"Create new Domains","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","url":"\/documentation\/swiftecc\/createdomain","kind":"article","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"title":"AEAD Encrypt and Decrypt","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"url":"\/documentation\/swiftecc\/ecarithmetic","kind":"article","title":"Elliptic Curve Arithmetic","abstract":[],"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"type":"topic","title":"Load exsisting Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","url":"\/documentation\/swiftecc\/loadkeys","kind":"article","abstract":[],"role":"article"},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"title":"Create new Keys","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/createkeys"},"doc://SwiftECC/documentation/SwiftECC/References":{"title":"References","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","kind":"article","abstract":[],"role":"article","url":"\/documentation\/swiftecc\/references"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"kind":"article","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","abstract":[],"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"role":"article","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","kind":"article","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"kind":"article","title":"Dependencies","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","url":"\/documentation\/swiftecc\/dependencies","type":"topic","abstract":[],"role":"article"}}}