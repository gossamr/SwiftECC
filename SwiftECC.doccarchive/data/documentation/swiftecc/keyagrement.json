{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","primaryContentSections":[{"content":[{"level":2,"text":"","anchor":"","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key."}]},{"type":"paragraph","inlineContent":[{"text":"The other party can generate the same byte array by using his own private key and your public key.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC supports three mechanisms:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The basic Diffie-Hellman primitive","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The X9.63 version specified in [SEC 1] section 3.6.1"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The HKDF version specified in [RFC-5869]","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Basic-Diffie-Hellman-Example","type":"heading","text":"Basic Diffie-Hellman Example"},{"syntax":"swift","type":"codeListing","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"],"type":"codeListing","syntax":"swift"},{"anchor":"X963-Example","text":"X9.63 Example","type":"heading","level":3},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use."}]},{"text":"HKDF Example","type":"heading","anchor":"HKDF-Example","level":3},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"]},{"type":"paragraph","inlineContent":[{"text":"For the key agreement to work, the two parties must agree on which domain, which message digest,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which shared information (possibly none) and which salt (possibly none) to use."}]},{"text":"CryptoKit Compatibility","anchor":"CryptoKit-Compatibility","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with Apple CryptoKit key agreement"},{"type":"text","text":" "},{"type":"text","text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,"},{"type":"text","text":" "},{"text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"sharedSecret"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"sharedSecretFromKeyAgreement","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"x963KeyAgreement"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"type":"codeVoice","code":"x963DerivedSymmetricKey"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"hkdfKeyAgreement"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"hkdfDerivedSymmetricKey","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert CryptoKit keys - e.g. "},{"code":"ckPubKey","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ckPrivKey"},{"text":" - to the corresponding SwiftECC keys:","type":"text"}]},{"code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To convert SwiftECC keys - e.g. "},{"code":"eccPubKey","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"eccPrivKey"},{"type":"text","text":" - to the corresponding CryptoKit keys:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"variants":[{"paths":["\/documentation\/swiftecc\/keyagrement"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","title":"Secret Key Agreement","modules":[{"name":"SwiftECC"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"references":{"doc://SwiftECC/documentation/SwiftECC/References":{"url":"\/documentation\/swiftecc\/references","role":"article","title":"References","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"url":"\/documentation\/swiftecc\/acknowledgement","role":"article","title":"Acknowledgement","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"title":"Elliptic Curve Arithmetic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","role":"article","kind":"article","url":"\/documentation\/swiftecc\/ecarithmetic","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","url":"\/documentation\/swiftecc","abstract":[],"title":"SwiftECC","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","type":"topic","role":"collection"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"url":"\/documentation\/swiftecc\/createdomain","role":"article","title":"Create new Domains","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Usage":{"title":"Usage","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","role":"article","kind":"article","url":"\/documentation\/swiftecc\/usage","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","title":"Load exsisting Keys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/loadkeys","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"url":"\/documentation\/swiftecc\/performance","role":"article","title":"Performance","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"title":"AEAD Encrypt and Decrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","role":"article","kind":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"title":"Dependencies","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","role":"article","kind":"article","url":"\/documentation\/swiftecc\/dependencies","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","type":"topic","kind":"article","url":"\/documentation\/swiftecc\/createkeys","role":"article","title":"Create new Keys","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","kind":"article","url":"\/documentation\/swiftecc\/encryptdecrypt","role":"article","title":"Encrypt and Decrypt","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"title":"Encrypted Private Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","kind":"article","url":"\/documentation\/swiftecc\/signverify","role":"article","title":"Sign and Verify","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/Basics":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","type":"topic","kind":"article","url":"\/documentation\/swiftecc\/basics","role":"article","title":"Basics","abstract":[]}}}