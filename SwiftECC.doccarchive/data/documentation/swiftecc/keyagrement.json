{"seeAlsoSections":[{"title":"Articles","anchor":"Articles","generated":true,"identifiers":["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/keyagrement"]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"level":2,"anchor":"","type":"heading","text":""},{"inlineContent":[{"text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The other party can generate the same byte array by using his own private key and your public key.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftECC supports three mechanisms:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The basic Diffie-Hellman primitive","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The X9.63 version specified in [SEC 1] section 3.6.1"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The HKDF version specified in [RFC 5869]"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":4,"anchor":"Basic-Diffie-Hellman-Example","type":"heading","text":"Basic Diffie-Hellman Example"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"],"type":"codeListing"},{"level":4,"anchor":"X963-Example","type":"heading","text":"X9.63 Example"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use."}],"type":"paragraph"},{"level":4,"anchor":"HKDF-Example","type":"heading","text":"HKDF Example"},{"syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest,"},{"type":"text","text":" "},{"type":"text","text":"which shared information (possibly none) and which salt (possibly none) to use."}],"type":"paragraph"},{"level":4,"anchor":"CryptoKit-Compatibility","type":"heading","text":"CryptoKit Compatibility"},{"inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with CryptoKit key agreement"},{"type":"text","text":" "},{"type":"text","text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,"},{"type":"text","text":" "},{"type":"text","text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)","isActive":true},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"type":"codeVoice","code":"sharedSecretFromKeyAgreement"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","type":"reference","isActive":true},{"type":"text","text":" method corresponds to the CryptoKit method "},{"type":"codeVoice","code":"x963DerivedSymmetricKey"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"code":"hkdfDerivedSymmetricKey","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert CryptoKit keys - say "},{"type":"codeVoice","code":"ckPubKey"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ckPrivKey"},{"type":"text","text":" - to the corresponding SwiftECC keys:"}]},{"type":"codeListing","syntax":"swift","code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert SwiftECC keys - say "},{"type":"codeVoice","code":"eccPubKey"},{"type":"text","text":" and "},{"type":"codeVoice","code":"eccPrivKey"},{"type":"text","text":" - to the corresponding CryptoKit keys:"}]},{"type":"codeListing","syntax":"swift","code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyAgrement"},"kind":"article","metadata":{"title":"Secret Key Agreement","role":"article","modules":[{"name":"SwiftECC"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC"]]},"abstract":[{"type":"text","text":"Generating a shared secret"}],"references":{"doc://swiftecc.SwiftECC/documentation/SwiftECC":{"type":"topic","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC","kind":"symbol","title":"SwiftECC","url":"\/documentation\/swiftecc","role":"collection"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPrivateKey/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)":{"abstract":[{"type":"text","text":"Computes a shared secret key using Diffie-Hellman key agreement"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/hkdfkeyagreement(pubkey:length:kind:sharedinfo:salt:cofactor:)","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hkdfKeyAgreement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pubKey","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","text":"ECPublicKey","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"kind","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:6Digest07MessageA0C","text":"MessageDigest","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:6Digest07MessageA0C4KindO","text":"Kind","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"sharedInfo","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"salt","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"cofactor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"title":"hkdfKeyAgreement(pubKey:length:kind:sharedInfo:salt:cofactor:)"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"kind":"article","type":"topic","title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPrivateKey/sharedSecret(pubKey:cofactor:)":{"url":"\/documentation\/swiftecc\/ecprivatekey\/sharedsecret(pubkey:cofactor:)","abstract":[{"type":"text","text":"Computes a shared secret using the Diffie-Hellman key agreement primitive"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/sharedSecret(pubKey:cofactor:)","title":"sharedSecret(pubKey:cofactor:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sharedSecret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pubKey","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC11ECPublicKeyC","text":"ECPublicKey","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"cofactor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"role":"symbol"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"url":"\/documentation\/swiftecc\/aeadencryptdecrypt","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","title":"AEAD Encrypt and Decrypt","type":"topic","abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"kind":"article","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References","url":"\/documentation\/swiftecc\/references","title":"References"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/CreateDomain":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","title":"Create new Domains","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/createdomain","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"ECIES encryption and decryption","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","title":"Encrypt and Decrypt"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/KeyManagement":{"url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","type":"topic","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"kind":"article","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPrivateKey/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)":{"kind":"symbol","url":"\/documentation\/swiftecc\/ecprivatekey\/x963keyagreement(pubkey:length:kind:sharedinfo:cofactor:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"x963KeyAgreement","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pubKey","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ECPublicKey","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC11ECPublicKeyC"},{"text":", ","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"kind","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MessageDigest","kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C"},{"text":".","kind":"text"},{"text":"Kind","kind":"typeIdentifier","preciseIdentifier":"s:6Digest07MessageA0C4KindO"},{"text":", ","kind":"text"},{"text":"sharedInfo","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", ","kind":"text"},{"text":"cofactor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"type":"topic","abstract":[{"type":"text","text":"Computes a shared secret key using Diffie-Hellman key agreement"}],"title":"x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/x963KeyAgreement(pubKey:length:kind:sharedInfo:cofactor:)"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/EncryptedKeys":{"role":"article","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","kind":"article","type":"topic","title":"Encrypted Private Keys","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/Performance":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","title":"Performance"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","role":"article","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","url":"\/documentation\/swiftecc\/signverify","kind":"article","title":"Sign and Verify"}}}