{"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/keyagrement"]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"kind":"article","metadata":{"role":"article","title":"Secret Key Agreement","roleHeading":"Article","modules":[{"name":"SwiftECC"}]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"","level":2,"anchor":"","type":"heading"},{"inlineContent":[{"text":"Given your own private key and another party’s public key, you can generate a byte array that can be used as a symmetric encryption key.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The other party can generate the same byte array by using his own private key and your public key."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftECC supports three mechanisms:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The basic Diffie-Hellman primitive","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The X9.63 version specified in [SEC 1] section 3.6.1"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The HKDF version specified in [RFC 5869]","type":"text"}]}]}]},{"text":"Basic Diffie-Hellman Example","anchor":"Basic-Diffie-Hellman-Example","type":"heading","level":3},{"type":"codeListing","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let secretA = try privA.sharedSecret(pubKey: pubB)","  let secretB = try privB.sharedSecret(pubKey: pubA)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","syntax":"swift","code":["[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]","[44, 218, 188, 109, 139, 24, 227, 22, 116, 197, 147, 194, 138, 107, 105, 11, 236, 67, 236, 110, 42, 26, 250, 151, 111, 236, 60, 98, 210, 121, 243, 44]"]},{"text":"X9.63 Example","level":3,"type":"heading","anchor":"X963-Example"},{"type":"codeListing","syntax":"swift","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let secretA = try privA.x963KeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info)","  let secretB = try privB.x963KeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","code":["[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]","[92, 161, 137, 44, 47, 30, 6, 26, 43, 183, 199, 130, 19, 254, 232, 106]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For the key agreement to work, the two parties must agree on which domain, which message digest and which shared information (possibly none) to use."}],"type":"paragraph"},{"type":"heading","level":3,"text":"HKDF Example","anchor":"HKDF-Example"},{"type":"codeListing","code":["import SwiftECC","","do {","  let domain = Domain.instance(curve: .EC256r1)","","  \/\/ Party A's keys","  let (pubA, privA) = domain.makeKeyPair()","","  \/\/ Party B's keys","  let (pubB, privB) = domain.makeKeyPair()","","  let info: Bytes = [1, 2, 3]","  let salt: Bytes = [4, 5, 6]","  let secretA = try privA.hkdfKeyAgreement(pubKey: pubB, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  let secretB = try privB.hkdfKeyAgreement(pubKey: pubA, length: 16, md: .SHA2_256, sharedInfo: info, salt: salt)","  print(secretA)","  print(secretB)","} catch {","  print(\"Exception: \\(error)\")","}"],"syntax":"swift"},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]","[202, 36, 31, 96, 207, 220, 135, 77, 130, 41, 214, 139, 214, 30, 106, 180]"]},{"type":"paragraph","inlineContent":[{"text":"For the key agreement to work, the two parties must agree on which domain, which message digest,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which shared information (possibly none) and which salt (possibly none) to use."}]},{"anchor":"CryptoKit-Compatibility","text":"CryptoKit Compatibility","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC key agreement is compatible with Apple CryptoKit key agreement"},{"type":"text","text":" "},{"type":"text","text":"in that the EC256r1, EC384r1 and EC521r1 domains correspond to CryptoKit’s P256, P384 and P521 curves,"},{"type":"text","text":" "},{"type":"text","text":"and the SHA2_256, SHA2_384 and SHA2_512 message digests correspond to CryptoKit’s SHA256, SHA384 and SHA512 message digests."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"sharedSecret","type":"codeVoice"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"type":"codeVoice","code":"sharedSecretFromKeyAgreement"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"x963KeyAgreement"},{"text":" method corresponds to the CryptoKit method ","type":"text"},{"type":"codeVoice","code":"x963DerivedSymmetricKey"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"hkdfKeyAgreement","type":"codeVoice"},{"type":"text","text":" method corresponds to the CryptoKit method "},{"code":"hkdfDerivedSymmetricKey","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"To convert CryptoKit keys - say ","type":"text"},{"type":"codeVoice","code":"ckPubKey"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ckPrivKey"},{"type":"text","text":" - to the corresponding SwiftECC keys:"}],"type":"paragraph"},{"type":"codeListing","code":["let eccPubKey = try ECPublicKey(pem: ckPubKey.pemRepresentation)","let eccPrivKey = try ECPrivateKey(pem: ckPrivKey.pemRepresentation)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert SwiftECC keys - say "},{"type":"codeVoice","code":"eccPubKey"},{"text":" and ","type":"text"},{"code":"eccPrivKey","type":"codeVoice"},{"text":" - to the corresponding CryptoKit keys:","type":"text"}]},{"code":["let ckPubKey = try P256.KeyAgreement.PublicKey(pemRepresentation: eccPubKey.pem)","let ckPrivKey = try P256.KeyAgreement.PrivateKey(pemRepresentation: eccPrivKey.pem)"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"type":"topic","url":"\/documentation\/swiftecc\/loadkeys","abstract":[],"title":"Load exsisting Keys","role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"kind":"article","abstract":[],"url":"\/documentation\/swiftecc\/aeadencryptdecrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","role":"article","type":"topic","title":"AEAD Encrypt and Decrypt"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"abstract":[],"type":"topic","title":"Sign and Verify","role":"article","kind":"article","url":"\/documentation\/swiftecc\/signverify","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"role":"article","kind":"article","url":"\/documentation\/swiftecc\/dependencies","title":"Dependencies","abstract":[],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies"},"doc://SwiftECC/documentation/SwiftECC/References":{"url":"\/documentation\/swiftecc\/references","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","title":"References","type":"topic","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Usage":{"url":"\/documentation\/swiftecc\/usage","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","role":"article","title":"Usage","kind":"article","type":"topic","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"kind":"article","role":"article","title":"Encrypted Private Keys","type":"topic","abstract":[],"url":"\/documentation\/swiftecc\/encryptedkeys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","abstract":[],"kind":"article","role":"article","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains"},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"role":"article","kind":"article","url":"\/documentation\/swiftecc\/createkeys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","title":"Create new Keys","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"kind":"article","role":"article","title":"Encrypt and Decrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","type":"topic","abstract":[]},"doc://SwiftECC/documentation/SwiftECC":{"role":"collection","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[],"kind":"symbol","url":"\/documentation\/swiftecc","title":"SwiftECC","type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Basics":{"role":"article","kind":"article","url":"\/documentation\/swiftecc\/basics","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","title":"Basics","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"kind":"article","abstract":[],"url":"\/documentation\/swiftecc\/performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","role":"article","type":"topic","title":"Performance"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"url":"\/documentation\/swiftecc\/ecarithmetic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","role":"article","title":"Elliptic Curve Arithmetic","kind":"article","type":"topic","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","url":"\/documentation\/swiftecc\/acknowledgement","kind":"article","type":"topic","title":"Acknowledgement","abstract":[],"role":"article"}}}