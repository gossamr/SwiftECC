{"abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}],"metadata":{"title":"Create new Domains","roleHeading":"Article","role":"article","modules":[{"name":"SwiftECC"}]},"kind":"article","seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/createdomain"]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"","anchor":"","type":"heading"},{"level":4,"anchor":"Example-1","type":"heading","text":"Example 1"},{"type":"paragraph","inlineContent":[{"text":"This is example 3.5 from [GUIDE]. It shows how to make your own prime characteristic domain.","type":"text"}]},{"code":["import SwiftECC","import BigInt","","\/\/ Create the domain","let domain = try Domain.instance(name: \"EC29\", p: BInt(29), a: BInt(4), b: BInt(20), gx: BInt(1), gy: BInt(5), order: BInt(37), cofactor: 1)","","let p1 = Point(BInt(5), BInt(22))","let p2 = Point(BInt(16), BInt(27))","","print(\"p1 + p2 =\", try domain.addPoints(p1, p2))","print(\"p1 * 2  =\", try domain.multiplyPoint(p1, BInt(2)))","","\/\/ Inspect the domain - please refer [SEC 1] appendix C.2","print(domain.asn1Explicit())"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"code":["p1 + p2 = Point(13, 6)","p1 * 2  = Point(14, 6)","Sequence (6):","  Integer: 1","  Sequence (2):","    Object Identifier: 1.2.840.10045.1.1","    Integer: 29","  Sequence (2):","    Octet String (1): 04","    Octet String (1): 14","  Octet String (3): 04 01 05","  Integer: 37","  Integer: 1"],"syntax":"swift","type":"codeListing"},{"level":4,"type":"heading","text":"Example 2","anchor":"Example-2"},{"inlineContent":[{"type":"text","text":"This is example 3.6 from [GUIDE]. It shows how to make your own characteristic 2 domain."}],"type":"paragraph"},{"code":["import SwiftECC","import BigInt","","\/\/ Reduction polynomial for x^4 + x^1 + 1    ","let rp = RP(4, 1)","","\/\/ Create the domain","let domain = try Domain.instance(name: \"EC4\", rp: rp, a: BInt(8), b: BInt(9), gx: BInt(1), gy: BInt(1), order: BInt(22), cofactor: 2)","","let p1 = Point(BInt(2), BInt(15))","let p2 = Point(BInt(12), BInt(12))","","print(\"p1 + p2 =\", try domain.addPoints(p1, p2))","print(\"p1 * 2  =\", try domain.multiplyPoint(p1, BInt(2)))","","\/\/ Inspect the domain - please refer [SEC 1] appendix C.2","print(domain.asn1Explicit())"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"syntax":"swift","code":["p1 + p2 = Point(1, 1)","p1 * 2  = Point(11, 2)","Sequence (6):","  Integer: 1","  Sequence (2):","    Object Identifier: 1.2.840.10045.1.2","    Sequence (2):","      Integer: 4","      Integer: 1","  Sequence (2):","    Octet String (1): 08","    Octet String (1): 09","  Octet String (3): 04 01 01","  Integer: 22","  Integer: 2"],"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","interfaceLanguage":"swift"},"references":{"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","url":"\/documentation\/swiftecc\/performance","type":"topic","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"type":"text","text":"Execution times for certain SwiftECC operations"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","kind":"article","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"url":"\/documentation\/swiftecc\/signverify","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC":{"url":"\/documentation\/swiftecc","type":"topic","role":"collection","title":"SwiftECC","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","title":"Encrypt and Decrypt","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","title":"AEAD Encrypt and Decrypt","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","title":"Acknowledgement","kind":"article","abstract":[{"type":"text","text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES"}],"url":"\/documentation\/swiftecc\/acknowledgement","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","title":"Elliptic Curve Arithmetic","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"abstract":[{"type":"text","text":"Generating a shared secret"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","kind":"article","role":"article"}}}