{"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"kind":"article","metadata":{"roleHeading":"Article","role":"article","title":"Encrypt and Decrypt","modules":[{"name":"SwiftECC"}]},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"]}],"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/encryptdecrypt"]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"","text":"","type":"heading","level":2},{"inlineContent":[{"text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of","type":"text"},{"type":"text","text":" "},{"text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following cipher block modes are supported:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GCM"}]},{"text":" - Galois Counter mode. This is the default mode","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ECB"}]},{"type":"text","text":" - Electronic Codebook mode with PKCS#7 padding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"CBC","type":"text"}]},{"type":"text","text":" - Cipher Block Chaining mode with PKCS#7 padding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"CFB","type":"text"}]},{"type":"text","text":" - Cipher Feedback mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"CTR"}],"type":"strong"},{"text":" - Counter mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"OFB"}]},{"text":" - Output Feedback mode","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip"},{"text":" ","type":"text"},{"text":"using AES-128 is shown below - units are Megabytes per second.","type":"text"}],"type":"paragraph"},{"header":"row","alignments":["left","right","right"],"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Block Mode","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Encrypt"}]}],[{"inlineContent":[{"type":"text","text":"Decrypt"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"GCM"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"53 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"ECB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CBC","type":"text"}]}],[{"inlineContent":[{"text":"24 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"25 MByte\/Sec","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"CFB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"23 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CTR"}]}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"OFB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"Unless compatibility with IBMâ€™s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated.","type":"text"},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","type":"reference"},{"type":"text","text":" \/ "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik"},{"text":" methods instead. Their performance is many times better.","type":"text"}]},{"text":"Example","anchor":"Example","level":4,"type":"heading"},{"type":"codeListing","syntax":"swift","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["The quick brown fox jumps over the lazy dog!"],"type":"codeListing"},{"level":4,"anchor":"Key-Derivation","text":"Key Derivation","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"text":" ","type":"text"},{"text":"Six cases are considered:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-128\/GCM block mode","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 32 bytes."},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 16 ..< 32"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/GCM block mode","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"KDF generates 40 bytes."},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 24 ..< 40","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-256\/GCM block mode","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 48 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 32 ..< 48"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-128\/Non-GCM block mode"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"text":"HMAC key = bytes 16 ..< 48","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-192\/Non-GCM block mode","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 24 ..< 56"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-256\/Non-GCM block mode","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"KDF generates 64 bytes."},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"text":"\n","type":"text"},{"text":"HMAC key = bytes 32 ..< 64","type":"text"}],"type":"paragraph"}]}]},{"anchor":"IV","type":"heading","level":4,"text":"IV"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes."}]},{"inlineContent":[{"text":"The AES key and HMAC key can be retrieved with the ","type":"text"},{"code":"ECPrivateKey","type":"codeVoice"},{"text":" method ","type":"text"},{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"BlueECC-Compatibility","text":"BlueECC Compatibility","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM"},{"type":"text","text":" "},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBMâ€™s BlueECC product using curve prime256v1,"},{"type":"text","text":" "},{"type":"text","text":"secp384r1, and secp521r1, respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"text":" ","type":"text"},{"text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively.","type":"text"}]}]}],"references":{"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/ECPublicKey/encryptAESGCM(msg:cipher:aad:)-7ow39":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"encryptAESGCM","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"msg"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cipher"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"kind":"text","text":", "},{"text":"aad","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier","text":"Bytes"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","url":"\/documentation\/swiftecc\/ecpublickey\/encryptaesgcm(msg:cipher:aad:)-7ow39","abstract":[{"text":"Encrypts a byte array with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data","type":"text"}],"kind":"symbol","type":"topic","title":"encryptAESGCM(msg:cipher:aad:)","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"abstract":[{"type":"text","text":"Generating a shared secret"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","url":"\/documentation\/swiftecc\/performance","type":"topic","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"type":"text","text":"Execution times for certain SwiftECC operations"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/decryptAESGCM(msg:cipher:aad:)-7hhik":{"type":"topic","title":"decryptAESGCM(msg:cipher:aad:)","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","kind":"symbol","abstract":[{"type":"text","text":"Decrypts a byte array message with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decryptAESGCM"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"msg"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"kind":"text","text":", "},{"text":"cipher","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC9AESCipherO","text":"AESCipher","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/decryptaesgcm(msg:cipher:aad:)-7hhik","role":"symbol"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","kind":"article","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"url":"\/documentation\/swiftecc\/signverify","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/getKeyAndMac(msg:cipher:mode:)-8d85z":{"title":"getKeyAndMac(msg:cipher:mode:)","url":"\/documentation\/swiftecc\/ecprivatekey\/getkeyandmac(msg:cipher:mode:)-8d85z","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"getKeyAndMac","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"msg"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cipher"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"kind":"text","text":", "},{"text":"mode","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BlockMode","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9BlockModeO"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> (key"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", mac","kind":"text"},{"kind":"text","text":": "},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"kind":"text","text":")"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns the AES key and HMAC key that were used to encrypt the message"}],"kind":"symbol"},"doc://SwiftECC/documentation/SwiftECC":{"url":"\/documentation\/swiftecc","type":"topic","role":"collection","title":"SwiftECC","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","title":"AEAD Encrypt and Decrypt","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","title":"Acknowledgement","kind":"article","abstract":[{"type":"text","text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES"}],"url":"\/documentation\/swiftecc\/acknowledgement","role":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","title":"Elliptic Curve Arithmetic","kind":"article","role":"article"}}}