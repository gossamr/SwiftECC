{"hierarchy":{"paths":[["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/encryptdecrypt"]}],"sections":[],"metadata":{"title":"Encrypt and Decrypt","role":"article","roleHeading":"Article","modules":[{"name":"SwiftECC"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References"],"generated":true,"anchor":"Articles"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"","text":""},{"inlineContent":[{"type":"text","text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of"},{"type":"text","text":" "},{"type":"text","text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice."}],"type":"paragraph"},{"inlineContent":[{"text":"The following cipher block modes are supported:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"GCM","type":"text"}]},{"text":" - Galois Counter mode. This is the default mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"ECB","type":"text"}],"type":"strong"},{"text":" - Electronic Codebook mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CBC"}]},{"text":" - Cipher Block Chaining mode with PKCS#7 padding","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"CFB"}],"type":"strong"},{"text":" - Cipher Feedback mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"CTR","type":"text"}],"type":"strong"},{"type":"text","text":" - Counter mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"OFB"}]},{"type":"text","text":" - Output Feedback mode"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip"},{"type":"text","text":" "},{"type":"text","text":"using AES-128 is shown below - units are Megabytes per second."}],"type":"paragraph"},{"alignments":["left","right","right"],"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Block Mode","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Encrypt","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decrypt","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"GCM"}]}],[{"type":"paragraph","inlineContent":[{"text":"53 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"ECB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"CBC","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"24 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"25 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CTR"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"OFB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}]]]},{"inlineContent":[{"text":"Unless compatibility with IBMâ€™s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated.","type":"text"},{"text":" ","type":"text"},{"text":"Use the ","type":"text"},{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","type":"reference","isActive":true},{"text":" \/ ","type":"text"},{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","type":"reference","isActive":true},{"text":" methods instead. Their performance is many times better.","type":"text"}],"type":"paragraph"},{"level":4,"type":"heading","anchor":"Example","text":"Example"},{"syntax":"swift","type":"codeListing","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["The quick brown fox jumps over the lazy dog!"]},{"type":"heading","anchor":"Key-Derivation","level":4,"text":"Key Derivation"},{"type":"paragraph","inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"text":" ","type":"text"},{"text":"Six cases are considered:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-128\/GCM block mode"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 32 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 16 ..< 32","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-192\/GCM block mode"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 40 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 40","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-256\/GCM block mode","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 48 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 48"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-128\/Non-GCM block mode"}]}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"text":"HMAC key = bytes 16 ..< 48","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-192\/Non-GCM block mode","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"HMAC key = bytes 24 ..< 56","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"AES-256\/Non-GCM block mode"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 64 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"HMAC key = bytes 32 ..< 64"}]}]}]},{"type":"heading","anchor":"IV","level":4,"text":"IV"},{"type":"paragraph","inlineContent":[{"text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The AES key and HMAC key can be retrieved with the "},{"type":"codeVoice","code":"ECPrivateKey"},{"type":"text","text":" method "},{"type":"reference","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","isActive":true},{"type":"text","text":"."}]},{"type":"heading","anchor":"BlueECC-Compatibility","level":4,"text":"BlueECC Compatibility"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM"},{"type":"text","text":" "},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBMâ€™s BlueECC product using curve prime256v1,"},{"type":"text","text":" "},{"type":"text","text":"secp384r1, and secp521r1, respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"type":"text","text":" "},{"type":"text","text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively."}]}],"kind":"content"}],"abstract":[{"text":"ECIES encryption and decryption","type":"text"}],"kind":"article","identifier":{"url":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","interfaceLanguage":"swift"},"references":{"doc://swiftecc.SwiftECC/documentation/SwiftECC/Performance":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","title":"Performance"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPrivateKey/getKeyAndMac(msg:cipher:mode:)-8d85z":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","url":"\/documentation\/swiftecc\/ecprivatekey\/getkeyandmac(msg:cipher:mode:)-8d85z","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getKeyAndMac"},{"kind":"text","text":"("},{"kind":"externalParam","text":"msg"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cipher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO","text":"AESCipher"},{"text":", ","kind":"text"},{"text":"mode","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BlockMode","preciseIdentifier":"s:8SwiftECC9BlockModeO","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> (key","kind":"text"},{"text":": ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":", mac","kind":"text"},{"text":": ","kind":"text"},{"text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"getKeyAndMac(msg:cipher:mode:)","abstract":[{"text":"Returns the AES key and HMAC key that were used to encrypt the message","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References","url":"\/documentation\/swiftecc\/references","title":"References"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/KeyManagement":{"url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","type":"topic","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"kind":"article","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPrivateKey/decryptAESGCM(msg:cipher:aad:)-7hhik":{"abstract":[{"text":"Decrypts a byte array message with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decryptAESGCM","kind":"identifier"},{"text":"(","kind":"text"},{"text":"msg","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/decryptaesgcm(msg:cipher:aad:)-7hhik","title":"decryptAESGCM(msg:cipher:aad:)","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","type":"topic"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"url":"\/documentation\/swiftecc\/aeadencryptdecrypt","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","title":"AEAD Encrypt and Decrypt","type":"topic","abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"kind":"article","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/CreateDomain":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","title":"Create new Domains","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/createdomain","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/EncryptedKeys":{"role":"article","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","kind":"article","type":"topic","title":"Encrypted Private Keys","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC":{"type":"topic","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC","kind":"symbol","title":"SwiftECC","url":"\/documentation\/swiftecc","role":"collection"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","role":"article","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","url":"\/documentation\/swiftecc\/signverify","kind":"article","title":"Sign and Verify"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"kind":"article","type":"topic","title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECPublicKey/encryptAESGCM(msg:cipher:aad:)-7ow39":{"abstract":[{"text":"Encrypts a byte array with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encryptAESGCM","kind":"identifier"},{"text":"(","kind":"text"},{"text":"msg","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AESCipher","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":") -> ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"}],"title":"encryptAESGCM(msg:cipher:aad:)","kind":"symbol","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","role":"symbol","url":"\/documentation\/swiftecc\/ecpublickey\/encryptaesgcm(msg:cipher:aad:)-7ow39","type":"topic"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"type":"text","text":"Generating a shared secret"}]}}}