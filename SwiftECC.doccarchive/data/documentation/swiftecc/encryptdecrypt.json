{"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"]}],"metadata":{"role":"article","title":"Encrypt and Decrypt","modules":[{"name":"SwiftECC"}],"roleHeading":"Article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"","text":"","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of"},{"type":"text","text":" "},{"type":"text","text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice."}]},{"inlineContent":[{"type":"text","text":"The following cipher block modes are supported:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"GCM - Galois Counter mode. This is the default mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ECB - Electronic Codebook mode with PKCS#7 padding"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"CBC - Cipher Block Chaining mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB - Cipher Feedback mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"CTR - Counter mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"OFB - Output Feedback mode","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip"},{"type":"text","text":" "},{"type":"text","text":"using AES-128 is shown below - units are Megabytes per second."}],"type":"paragraph"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Block Mode"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Encrypt","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Decrypt","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"GCM"}]}],[{"inlineContent":[{"type":"text","text":"53 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}]],[[{"inlineContent":[{"text":"ECB","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CBC"}]}],[{"inlineContent":[{"text":"24 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"25 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB"}]}],[{"inlineContent":[{"text":"23 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CTR"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 MByte\/Sec","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"OFB","type":"text"}]}],[{"inlineContent":[{"text":"29 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"29 MByte\/Sec","type":"text"}]}]]]},{"inlineContent":[{"type":"text","text":"Unless compatibility with IBM’s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated."},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"encryptAESGCM"},{"text":" \/ ","type":"text"},{"code":"decryptAESGCM","type":"codeVoice"},{"type":"text","text":" methods instead. Their performance is many times better."}],"type":"paragraph"},{"text":"Example","level":3,"type":"heading","anchor":"Example"},{"syntax":"swift","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving"}],"type":"paragraph"},{"code":["The quick brown fox jumps over the lazy dog!"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Key Derivation","anchor":"Key-Derivation"},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Six cases are considered:"}],"type":"paragraph"},{"type":"heading","text":"AES-128\/GCM block mode","anchor":"AES-128GCM-block-mode","level":4},{"inlineContent":[{"type":"text","text":"KDF generates 32 bytes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"}]},{"inlineContent":[{"type":"text","text":"Nonce = bytes 16 ..< 32"}],"type":"paragraph"},{"text":"AES-192\/GCM block mode","level":4,"type":"heading","anchor":"AES-192GCM-block-mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 40 bytes."}]},{"inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Nonce = bytes 24 ..< 40"}],"type":"paragraph"},{"text":"AES-256\/GCM block mode","type":"heading","level":4,"anchor":"AES-256GCM-block-mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 48 bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"}]},{"type":"paragraph","inlineContent":[{"text":"Nonce = bytes 32 ..< 48","type":"text"}]},{"type":"heading","anchor":"AES-128Non-GCM-block-mode","level":4,"text":"AES-128\/Non-GCM block mode"},{"inlineContent":[{"type":"text","text":"KDF generates 48 bytes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"}]},{"inlineContent":[{"text":"HMAC key = bytes 16 ..< 48","type":"text"}],"type":"paragraph"},{"anchor":"AES-192Non-GCM-block-mode","level":4,"text":"AES-192\/Non-GCM block mode","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"HMAC key = bytes 24 ..< 56","type":"text"}]},{"anchor":"AES-256Non-GCM-block-mode","text":"AES-256\/Non-GCM block mode","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"text":"KDF generates 64 bytes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"HMAC key = bytes 32 ..< 64","type":"text"}]},{"text":"","anchor":"","type":"heading","level":3},{"inlineContent":[{"text":"The AES key and HMAC key can be retrieved with the ECPrivateKey method ","type":"text"},{"type":"codeVoice","code":"getKeyAndMac"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes.","type":"text"}]},{"text":"BlueECC Compatibility","type":"heading","level":3,"anchor":"BlueECC-Compatibility"},{"inlineContent":[{"type":"text","text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM"},{"text":" ","type":"text"},{"text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBM’s BlueECC product using curve prime256v1,","type":"text"},{"type":"text","text":" "},{"text":"secp384r1, and secp521r1, respectively.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,"},{"type":"text","text":" "},{"text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/swiftecc\/encryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"title":"AEAD Encrypt and Decrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","role":"article","kind":"article","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"url":"\/documentation\/swiftecc\/acknowledgement","role":"article","title":"Acknowledgement","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC":{"kind":"symbol","url":"\/documentation\/swiftecc","abstract":[],"title":"SwiftECC","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","type":"topic","role":"collection"},"doc://SwiftECC/documentation/SwiftECC/LoadKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/LoadKeys","title":"Load exsisting Keys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/loadkeys","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Dependencies":{"title":"Dependencies","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Dependencies","role":"article","kind":"article","url":"\/documentation\/swiftecc\/dependencies","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","kind":"article","url":"\/documentation\/swiftecc\/signverify","role":"article","title":"Sign and Verify","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/Usage":{"title":"Usage","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Usage","role":"article","kind":"article","url":"\/documentation\/swiftecc\/usage","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","role":"article","kind":"article","url":"\/documentation\/swiftecc\/keyagrement","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"title":"Elliptic Curve Arithmetic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","role":"article","kind":"article","url":"\/documentation\/swiftecc\/ecarithmetic","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/Basics":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Basics","type":"topic","kind":"article","url":"\/documentation\/swiftecc\/basics","role":"article","title":"Basics","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/CreateKeys":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateKeys","type":"topic","kind":"article","url":"\/documentation\/swiftecc\/createkeys","role":"article","title":"Create new Keys","abstract":[]},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"title":"Encrypted Private Keys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[],"type":"topic"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"url":"\/documentation\/swiftecc\/createdomain","role":"article","title":"Create new Domains","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"url":"\/documentation\/swiftecc\/references","role":"article","title":"References","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","abstract":[],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"url":"\/documentation\/swiftecc\/performance","role":"article","title":"Performance","type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[],"kind":"article"}}}