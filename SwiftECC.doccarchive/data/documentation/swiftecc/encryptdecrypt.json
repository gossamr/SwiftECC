{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","anchor":"","text":"","level":2},{"type":"paragraph","inlineContent":[{"text":"Encryption and decryption is done using the ECIES algorithm based on the AES block cipher using one of","type":"text"},{"type":"text","text":" "},{"text":"AES-128, AES-192 or AES-256 ciphers, depending on your choice.","type":"text"}]},{"inlineContent":[{"text":"The following cipher block modes are supported:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"GCM","type":"text"}],"type":"strong"},{"text":" - Galois Counter mode. This is the default mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ECB"}]},{"text":" - Electronic Codebook mode with PKCS#7 padding","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"CBC","type":"text"}],"type":"strong"},{"type":"text","text":" - Cipher Block Chaining mode with PKCS#7 padding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CFB"}]},{"type":"text","text":" - Cipher Feedback mode"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"CTR"}],"type":"strong"},{"type":"text","text":" - Counter mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"OFB"}],"type":"strong"},{"type":"text","text":" - Output Feedback mode"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021, Apple M1 chip","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using AES-128 is shown below - units are Megabytes per second."}]},{"alignments":["left","right","right"],"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Block Mode"}]}],[{"inlineContent":[{"type":"text","text":"Encrypt"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Decrypt"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"GCM"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"53 MByte\/Sec"}]}],[{"inlineContent":[{"type":"text","text":"53 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"ECB"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 MByte\/Sec"}]}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"CBC","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"24 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"25 MByte\/Sec"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"CFB"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"23 MByte\/Sec"}]}]],[[{"inlineContent":[{"text":"CTR","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"30 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"30 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"OFB","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"29 MByte\/Sec"}]}],[{"type":"paragraph","inlineContent":[{"text":"29 MByte\/Sec","type":"text"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"Unless compatibility with IBM’s BlueECC product is necessary, encryption \/ decryption using GCM block mode is deprecated.","type":"text"},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","isActive":true},{"type":"text","text":" \/ "},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","isActive":true},{"text":" methods instead. Their performance is many times better.","type":"text"}]},{"anchor":"Example","type":"heading","text":"Example","level":4},{"syntax":"swift","code":["import SwiftECC","","\/\/ You need a public key to encrypt a message and the corresponding private key to decrypt it,","\/\/ for example from the EC163k1 domain","","let pemPublic163k1 =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","","let pemPrivate163k1 =","\"\"\"","-----BEGIN EC PRIVATE KEY-----","MFICAQEEFNfflqz2oOd9WpxuMZ9wJTFO1sjgoAcGBSuBBAABoS4DLAAEA6txn7CCae0d9AiGj3Rk","5m9XflTCB81oe1fKZi4F4oipSF2u79k8TD5J","-----END EC PRIVATE KEY-----","\"\"\"","","let text = \"The quick brown fox jumps over the lazy dog!\"","","do {","  let pubKey = try ECPublicKey(pem: pemPublic163k1)","  let privKey = try ECPrivateKey(pem: pemPrivate163k1)","  let encryptedData = pubKey.encrypt(msg: text.data(using: .utf8)!, cipher: .AES128)","  let decryptedData = try privKey.decrypt(msg: encryptedData, cipher: .AES128)","  print(String(data: decryptedData, encoding: .utf8)!)","} catch {","  print(\"\\(error)\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["The quick brown fox jumps over the lazy dog!"],"type":"codeListing","syntax":"swift"},{"text":"Key Derivation","type":"heading","level":4,"anchor":"Key-Derivation"},{"inlineContent":[{"type":"text","text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6."},{"type":"text","text":" "},{"type":"text","text":"Six cases are considered:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-128\/GCM block mode"}]}]},{"inlineContent":[{"type":"text","text":"KDF generates 32 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 16 ..< 32","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-192\/GCM block mode"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 40 bytes."},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 24 ..< 40"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-256\/GCM block mode","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"KDF generates 48 bytes."},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 32 ..< 48","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-128\/Non-GCM block mode","type":"text"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 48 bytes.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"text":"\n","type":"text"},{"type":"text","text":"HMAC key = bytes 16 ..< 48"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-192\/Non-GCM block mode","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 56 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"type":"text","text":"\n"},{"text":"HMAC key = bytes 24 ..< 56","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-256\/Non-GCM block mode","type":"text"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"text":"KDF generates 64 bytes.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"HMAC key = bytes 32 ..< 64"}]}]}]},{"text":"IV","type":"heading","level":4,"anchor":"IV"},{"inlineContent":[{"text":"For block modes CBC, CFB, CTR, and OFB the initialization vector (IV) is 16 zero bytes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The AES key and HMAC key can be retrieved with the ","type":"text"},{"type":"codeVoice","code":"ECPrivateKey"},{"text":" method ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","isActive":true},{"text":".","type":"text"}]},{"text":"BlueECC Compatibility","anchor":"BlueECC-Compatibility","level":4,"type":"heading"},{"inlineContent":[{"text":"Data encrypted by SwiftECC in the EC256r1 domain with AES128\/GCM, in the EC384r1 domain with AES256\/GCM","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and in the EC521r1 domain with AES256\/GCM can be decrypted with IBM’s BlueECC product using curve prime256v1,"},{"type":"text","text":" "},{"type":"text","text":"secp384r1, and secp521r1, respectively."}],"type":"paragraph"},{"inlineContent":[{"text":"Likewise, data encrypted by BlueECC with curve prime256v1, secp384r1 and secp521,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be decrypted by SwiftECC using EC256r1 with AES128\/GCM, EC384r1 with AES256\/GCM and EC521r1 with AES256\/GCM, respectively."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swiftecc\/encryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt"},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"generated":true}],"metadata":{"role":"article","title":"Encrypt and Decrypt","roleHeading":"Article","modules":[{"name":"SwiftECC"}]},"sections":[],"references":{"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"title":"Elliptic Curve Arithmetic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","role":"article","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"url":"\/documentation\/swiftecc\/ecarithmetic","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"kind":"article","url":"\/documentation\/swiftecc\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","title":"Key Management","type":"topic","role":"article"},"doc://SwiftECC/documentation/SwiftECC/AEADEncryptDecrypt":{"role":"article","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","kind":"article","type":"topic","url":"\/documentation\/swiftecc\/aeadencryptdecrypt","abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"title":"AEAD Encrypt and Decrypt"},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/getKeyAndMac(msg:cipher:mode:)-8d85z":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/getKeyAndMac(msg:cipher:mode:)-8d85z","title":"getKeyAndMac(msg:cipher:mode:)","type":"topic","abstract":[{"text":"Returns the AES key and HMAC key that were used to encrypt the message","type":"text"}],"url":"\/documentation\/swiftecc\/ecprivatekey\/getkeyandmac(msg:cipher:mode:)-8d85z","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"getKeyAndMac","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"msg"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AESCipher","preciseIdentifier":"s:8SwiftECC9AESCipherO"},{"text":", ","kind":"text"},{"text":"mode","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BlockMode","preciseIdentifier":"s:8SwiftECC9BlockModeO","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> (key"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":", mac","kind":"text"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"kind":"text","text":")"}]},"doc://SwiftECC/documentation/SwiftECC/ECPrivateKey/decryptAESGCM(msg:cipher:aad:)-7hhik":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decryptAESGCM","kind":"identifier"},{"kind":"text","text":"("},{"text":"msg","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes"},{"text":", ","kind":"text"},{"text":"cipher","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AESCipher","preciseIdentifier":"s:8SwiftECC9AESCipherO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"aad","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:8SwiftECC5Bytesa","text":"Bytes","kind":"typeIdentifier"}],"title":"decryptAESGCM(msg:cipher:aad:)","type":"topic","url":"\/documentation\/swiftecc\/ecprivatekey\/decryptaesgcm(msg:cipher:aad:)-7hhik","role":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPrivateKey\/decryptAESGCM(msg:cipher:aad:)-7hhik","abstract":[{"type":"text","text":"Decrypts a byte array message with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data"}],"kind":"symbol"},"doc://SwiftECC/documentation/SwiftECC/ECPublicKey/encryptAESGCM(msg:cipher:aad:)-7ow39":{"abstract":[{"type":"text","text":"Encrypts a byte array with ECIES using the AES\/GCM algorithm - possibly with additional authenticated data"}],"role":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECPublicKey\/encryptAESGCM(msg:cipher:aad:)-7ow39","title":"encryptAESGCM(msg:cipher:aad:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftecc\/ecpublickey\/encryptaesgcm(msg:cipher:aad:)-7ow39","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encryptAESGCM","kind":"identifier"},{"kind":"text","text":"("},{"text":"msg","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bytes","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"kind":"text","text":", "},{"text":"cipher","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC9AESCipherO","text":"AESCipher"},{"kind":"text","text":", "},{"text":"aad","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"},{"kind":"text","text":") -> "},{"text":"Bytes","kind":"typeIdentifier","preciseIdentifier":"s:8SwiftECC5Bytesa"}]},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","role":"article","type":"topic","title":"Secret Key Agreement","abstract":[{"type":"text","text":"Generating a shared secret"}],"kind":"article","url":"\/documentation\/swiftecc\/keyagrement"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","title":"Create new Domains","type":"topic","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"url":"\/documentation\/swiftecc\/createdomain","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"type":"topic","title":"Encrypted Private Keys","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}]},"doc://SwiftECC/documentation/SwiftECC":{"type":"topic","kind":"symbol","title":"SwiftECC","role":"collection","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic Curve Cryptography","type":"text"}],"url":"\/documentation\/swiftecc"},"doc://SwiftECC/documentation/SwiftECC/References":{"title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"url":"\/documentation\/swiftecc\/references","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"type":"text","text":"Execution times for certain SwiftECC operations"}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/performance","title":"Performance"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","url":"\/documentation\/swiftecc\/signverify","role":"article","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"kind":"article","title":"Sign and Verify","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify"}}}