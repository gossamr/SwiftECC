{"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References"],"title":"Articles","generated":true}],"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"variants":[{"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"metadata":{"role":"article","title":"AEAD Encrypt and Decrypt","roleHeading":"Article","modules":[{"name":"SwiftECC"}]},"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"content":[{"text":"","level":2,"anchor":"","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"type":"text","text":" "},{"type":"text","text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms."}]},{"level":4,"type":"heading","text":"Example","anchor":"Example"},{"code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["Hi, there!","Hi, there!"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,"},{"type":"text","text":" "},{"text":"Apple M1 chip is shown below - units are Megabytes per second.","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Algorithm"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Encrypt"}]}],[{"inlineContent":[{"type":"text","text":"Decrypt"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"500 MByte\/Sec","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"425 MByte\/Sec"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"AES-128\/GCM"}]}],[{"inlineContent":[{"type":"text","text":"2000 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"1200 MByte\/Sec","type":"text"}]}]]],"alignments":["right","right","right"],"type":"table"},{"type":"heading","text":"Key Derivation","anchor":"Key-Derivation","level":4},{"inlineContent":[{"type":"text","text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6."},{"type":"text","text":"\n"},{"type":"text","text":"Four cases are considered:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}],"type":"strong"}]},{"inlineContent":[{"text":"KDF generates 44 bytes.","type":"text"},{"type":"text","text":"\n"},{"text":"Encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 32 ..< 44","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AES-128\/GCM","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 28 bytes."},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 16 ..< 28","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-192\/GCM","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"KDF generates 36 bytes."},{"text":"\n","type":"text"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 24"},{"type":"text","text":"\n"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-256\/GCM"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]}],"type":"unorderedList"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://SwiftECC/documentation/SwiftECC":{"type":"topic","kind":"symbol","title":"SwiftECC","role":"collection","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic Curve Cryptography","type":"text"}],"url":"\/documentation\/swiftecc"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"title":"Encrypt and Decrypt","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","role":"article","type":"topic","kind":"article","url":"\/documentation\/swiftecc\/encryptdecrypt"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","role":"article","type":"topic","title":"Secret Key Agreement","abstract":[{"type":"text","text":"Generating a shared secret"}],"kind":"article","url":"\/documentation\/swiftecc\/keyagrement"},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","url":"\/documentation\/swiftecc\/signverify","role":"article","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"kind":"article","title":"Sign and Verify","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","title":"Create new Domains","type":"topic","abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"url":"\/documentation\/swiftecc\/createdomain","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"type":"text","text":"Execution times for certain SwiftECC operations"}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/performance","title":"Performance"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"type":"topic","title":"Encrypted Private Keys","kind":"article","url":"\/documentation\/swiftecc\/encryptedkeys","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","role":"article","abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}]},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"kind":"article","url":"\/documentation\/swiftecc\/keymanagement","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","title":"Key Management","type":"topic","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"title":"Elliptic Curve Arithmetic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","role":"article","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"url":"\/documentation\/swiftecc\/ecarithmetic","type":"topic","kind":"article"},"doc://SwiftECC/documentation/SwiftECC/References":{"title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"url":"\/documentation\/swiftecc\/references","type":"topic","kind":"article"}}}