{"kind":"article","sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement"],"title":"Articles"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"","anchor":""},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"type":"text","text":" "},{"text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms.","type":"text"}]},{"anchor":"Example","level":4,"type":"heading","text":"Example"},{"type":"codeListing","syntax":"swift","code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["Hi, there!","Hi, there!"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,"},{"type":"text","text":" "},{"type":"text","text":"Apple M1 chip is shown below - units are Megabytes per second."}]},{"alignments":["right","right","right"],"rows":[[[{"inlineContent":[{"type":"text","text":"Algorithm"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Encrypt","type":"text"}]}],[{"inlineContent":[{"text":"Decrypt","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"ChaCha20\/Poly1305"}]}],[{"inlineContent":[{"type":"text","text":"500 MByte\/Sec"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"425 MByte\/Sec","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"AES-128\/GCM"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"2000 MByte\/Sec"}]}],[{"inlineContent":[{"text":"1200 MByte\/Sec","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"anchor":"Key-Derivation","type":"heading","level":4,"text":"Key Derivation"},{"inlineContent":[{"text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"Four cases are considered:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"text":"\n","type":"text"},{"text":"Encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"AES-128\/GCM","type":"text"}],"type":"strong"}]},{"inlineContent":[{"type":"text","text":"KDF generates 28 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 16"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 16 ..< 28"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-192\/GCM"}]}]},{"inlineContent":[{"text":"KDF generates 36 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AES-256\/GCM"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KDF generates 44 bytes."},{"type":"text","text":"\n"},{"type":"text","text":"AES encryption\/decryption key = bytes 0 ..< 32"},{"text":"\n","type":"text"},{"type":"text","text":"Nonce = bytes 32 ..< 44"}]}]}]}]}],"abstract":[{"type":"text","text":"Authenticated Encryption with Associated Data"}],"metadata":{"title":"AEAD Encrypt and Decrypt","roleHeading":"Article","role":"article","modules":[{"name":"SwiftECC"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"]}],"hierarchy":{"paths":[["doc:\/\/SwiftECC\/documentation\/SwiftECC"]]},"references":{"doc://SwiftECC/documentation/SwiftECC":{"url":"\/documentation\/swiftecc","type":"topic","role":"collection","title":"SwiftECC","kind":"symbol","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC","abstract":[{"text":"Elliptic curve cryptography","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","title":"References","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/References","type":"topic","url":"\/documentation\/swiftecc\/references","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/SignVerify","title":"Sign and Verify","kind":"article","abstract":[{"type":"text","text":"Signing data and verifying signatures"}],"url":"\/documentation\/swiftecc\/signverify","role":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyAgrement":{"abstract":[{"type":"text","text":"Generating a shared secret"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyAgrement","url":"\/documentation\/swiftecc\/keyagrement","title":"Secret Key Agreement","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/ECArithmetic":{"abstract":[{"type":"text","text":"SwiftECC implements the common elliptic curve arithmetic operations"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/ECArithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","title":"Elliptic Curve Arithmetic","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/CreateDomain":{"abstract":[{"type":"text","text":"You can create your own domains as illustrated by two examples"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/CreateDomain","url":"\/documentation\/swiftecc\/createdomain","title":"Create new Domains","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"abstract":[{"type":"text","text":"ECIES encryption and decryption"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","title":"Encrypt and Decrypt","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/EncryptedKeys":{"abstract":[{"type":"text","text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","url":"\/documentation\/swiftecc\/encryptedkeys","title":"Encrypted Private Keys","kind":"article","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Acknowledgement":{"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Acknowledgement","title":"Acknowledgement","kind":"article","abstract":[{"type":"text","text":"The AES block cipher implementation is essentially a translation to Swift of the Go Language implementation of AES"}],"url":"\/documentation\/swiftecc\/acknowledgement","role":"article"},"doc://SwiftECC/documentation/SwiftECC/Performance":{"role":"article","url":"\/documentation\/swiftecc\/performance","type":"topic","title":"Performance","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/Performance","abstract":[{"type":"text","text":"Execution times for certain SwiftECC operations"}],"kind":"article"},"doc://SwiftECC/documentation/SwiftECC/KeyManagement":{"abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"type":"topic","identifier":"doc:\/\/SwiftECC\/documentation\/SwiftECC\/KeyManagement","url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","kind":"article","role":"article"}}}