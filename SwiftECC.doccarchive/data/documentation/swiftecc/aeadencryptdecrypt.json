{"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyAgrement","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References"],"generated":true,"anchor":"Articles"}],"identifier":{"url":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/AEADEncryptDecrypt","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"","type":"heading","anchor":"","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authenticated Encryption with Associated Data (AEAD) is implemented with the ChaCha20 \/ Poly1305 algorithm and the AES \/ GCM algorithm."},{"type":"text","text":" "},{"type":"text","text":"Both implementations use the CryptoKit framework, that takes advantage of hardware support for the AES and GCM algorithms."}]},{"text":"Example","type":"heading","anchor":"Example","level":4},{"code":["import SwiftECC","","let plainText = \"Hi, there!\"","let aaData = \"This is the additional authenticated data\"","","let (pub, priv) = Domain.instance(curve: .EC256k1).makeKeyPair()","","let cipherText1 = pub.encryptChaCha(msg: Bytes(plainText.utf8), aad: Bytes(aaData.utf8))","let cipherText2 = pub.encryptAESGCM(msg: Bytes(plainText.utf8), cipher: .AES128, aad: Bytes(aaData.utf8))","","do {","  let text1 = try priv.decryptChaCha(msg: cipherText1, aad: Bytes(aaData.utf8))","  print(String(bytes: text1, encoding: .utf8)!)","","  let text2 = try priv.decryptAESGCM(msg: cipherText2, cipher: .AES128, aad: Bytes(aaData.utf8))","  print(String(bytes: text2, encoding: .utf8)!)","} catch {","  print(\"Exception: \\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["Hi, there!","Hi, there!"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The encryption and decryption speed for domain EC256k1 (the bitcoin domain) measured on an iMac 2021,","type":"text"},{"text":" ","type":"text"},{"text":"Apple M1 chip is shown below - units are Megabytes per second.","type":"text"}]},{"header":"row","alignments":["right","right","right"],"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm"}]}],[{"inlineContent":[{"text":"Encrypt","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Decrypt","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"500 MByte\/Sec","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"425 MByte\/Sec"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"AES-128\/GCM"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"2000 MByte\/Sec"}],"type":"paragraph"}],[{"inlineContent":[{"text":"1200 MByte\/Sec","type":"text"}],"type":"paragraph"}]]]},{"text":"Key Derivation","type":"heading","anchor":"Key-Derivation","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftECC uses the X9.63 Key Derivation Function to derive block cipher keying materiel. Please refer [SEC 1] section 3.6."},{"type":"text","text":"\n"},{"type":"text","text":"Four cases are considered:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"ChaCha20\/Poly1305","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 44 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"Encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 32 ..< 44","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"AES-128\/GCM","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 28 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 16","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 16 ..< 28","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-192\/GCM"}]}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 36 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 24","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 24 ..< 36","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AES-256\/GCM"}]}],"type":"paragraph"},{"inlineContent":[{"text":"KDF generates 44 bytes.","type":"text"},{"text":"\n","type":"text"},{"text":"AES encryption\/decryption key = bytes 0 ..< 32","type":"text"},{"text":"\n","type":"text"},{"text":"Nonce = bytes 32 ..< 44","type":"text"}],"type":"paragraph"}]}]}]}],"metadata":{"title":"AEAD Encrypt and Decrypt","role":"article","modules":[{"name":"SwiftECC"}],"roleHeading":"Article"},"abstract":[{"text":"Authenticated Encryption with Associated Data","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftecc\/aeadencryptdecrypt"]}],"kind":"article","references":{"doc://swiftecc.SwiftECC/documentation/SwiftECC/CreateDomain":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/CreateDomain","title":"Create new Domains","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/createdomain","abstract":[{"text":"You can create your own domains as illustrated by two examples","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/EncryptDecrypt":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"ECIES encryption and decryption","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptDecrypt","url":"\/documentation\/swiftecc\/encryptdecrypt","title":"Encrypt and Decrypt"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/SignVerify":{"type":"topic","role":"article","abstract":[{"text":"Signing data and verifying signatures","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/SignVerify","url":"\/documentation\/swiftecc\/signverify","kind":"article","title":"Sign and Verify"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/EncryptedKeys":{"role":"article","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/EncryptedKeys","kind":"article","type":"topic","title":"Encrypted Private Keys","url":"\/documentation\/swiftecc\/encryptedkeys","abstract":[{"text":"Private keys can be encrypted as described in [PKCS#5] using the PBES2 scheme","type":"text"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/KeyAgrement":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyAgrement","title":"Secret Key Agreement","type":"topic","kind":"article","role":"article","url":"\/documentation\/swiftecc\/keyagrement","abstract":[{"type":"text","text":"Generating a shared secret"}]},"doc://swiftecc.SwiftECC/documentation/SwiftECC/KeyManagement":{"url":"\/documentation\/swiftecc\/keymanagement","title":"Key Management","identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/KeyManagement","type":"topic","abstract":[{"type":"text","text":"Creating new keys and loading exsisting keys"}],"kind":"article","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/ECArithmetic":{"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/ECArithmetic","abstract":[{"text":"SwiftECC implements the common elliptic curve arithmetic operations","type":"text"}],"kind":"article","type":"topic","title":"Elliptic Curve Arithmetic","url":"\/documentation\/swiftecc\/ecarithmetic","role":"article"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/Performance":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Execution times for certain SwiftECC operations","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/Performance","url":"\/documentation\/swiftecc\/performance","title":"Performance"},"doc://swiftecc.SwiftECC/documentation/SwiftECC/References":{"role":"article","kind":"article","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC\/References","url":"\/documentation\/swiftecc\/references","title":"References"},"doc://swiftecc.SwiftECC/documentation/SwiftECC":{"type":"topic","abstract":[{"type":"text","text":"Elliptic Curve Cryptography"}],"identifier":"doc:\/\/swiftecc.SwiftECC\/documentation\/SwiftECC","kind":"symbol","title":"SwiftECC","url":"\/documentation\/swiftecc","role":"collection"}}}